const express = require('express');
const multer = require('multer');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto'); // –î–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
const session = require('express-session'); // –î–ª—è —Å–µ—Å—Å–∏–π
const db = require('./db'); // –ü–æ–¥–∫–ª—é—á–∞—é –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
const OpenAI = require('openai'); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å DALL-E

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç—å
const upload = multer({
    storage: multer.memoryStorage(),
    limits: { 
        fileSize: 10 * 1024 * 1024, // 10MB
        files: 20 // –º–∞–∫—Å–∏–º—É–º 20 —Ñ–∞–π–ª–æ–≤
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
        }
    }
});

const PORT = 3000;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const YANDEX_TOKEN = 'y0__xCiw9GsARjA8zcg_drjmRPYVRdg8smUUH0pJWclVDOPZc2Erg';
const BASE_PATH = 'Architecture&design';
// –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const GENAPI_API_KEY = process.env.GENAPI_API_KEY || 'sk-3fnqSoE1Ld6V2ImZqxpliCsorUBkQ0MQ4RJ9SHpcs4osdoGDpYfFuJA3sBVs';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = OPENAI_API_KEY ? new OpenAI({
    apiKey: OPENAI_API_KEY,
}) : null;

// –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
console.log('\n=== –ü–†–û–í–ï–†–ö–ê API –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===');
console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
console.log('process.env.GENAPI_API_KEY:', process.env.GENAPI_API_KEY ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
console.log('process.env.REPLICATE_API_TOKEN:', process.env.REPLICATE_API_TOKEN ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
console.log('GENAPI_API_KEY –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞:', GENAPI_API_KEY ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');

if (GENAPI_API_KEY) {
    console.log('GenAPI –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', GENAPI_API_KEY.length);
    console.log('GenAPI –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:', GENAPI_API_KEY.substring(0, 10) + '...');
    console.log('GenAPI –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:', '...' + GENAPI_API_KEY.substring(GENAPI_API_KEY.length - 10));
    console.log('‚úÖ GenAPI —Ç–æ–∫–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
} else {
    console.log('‚ùå GenAPI —Ç–æ–∫–µ–Ω –ù–ï –ù–ê–ô–î–ï–ù - –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º');
}

if (process.env.REPLICATE_API_TOKEN) {
    console.log('Replicate –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', process.env.REPLICATE_API_TOKEN.length);
    console.log('Replicate –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:', process.env.REPLICATE_API_TOKEN.substring(0, 10) + '...');
    console.log('Replicate –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:', '...' + process.env.REPLICATE_API_TOKEN.substring(process.env.REPLICATE_API_TOKEN.length - 10));
    console.log('‚úÖ Replicate —Ç–æ–∫–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
} else {
    console.log('‚ùå Replicate —Ç–æ–∫–µ–Ω –ù–ï –ù–ê–ô–î–ï–ù');
    console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('  - .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç .env —Ñ–∞–π–ª–∞');
    console.log('  - –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è .env');
}
console.log('=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ===\n');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
    secret: 'your-secret-key-change-in-production', // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: false, // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ —Å HTTPS —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true
        maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
    }
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('.'));  // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
app.use(express.static('public'));  // –ò –∏–∑ –ø–∞–ø–∫–∏ public
app.use('/pic2', express.static(path.join(__dirname, 'pic2')));  // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤

// –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
db.testConnection()
    .then(isConnected => {
        if (isConnected) {
            console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    });

// ------------ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ------------

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–ª–∞–π–¥–µ—Ä–∞
app.get('/api/slider-images', async (req, res) => {
    try {
        const images = await db.query(
            'SELECT * FROM images WHERE entity_type = "slider" AND entity_id = 1 ORDER BY sort_order'
        );
        res.json({ success: true, images });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –°—Ç–∞—Ä—ã–π –ø—Ä–æ—Å—Ç–æ–π health endpoint —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å GenAPI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

// –ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–∏
app.post('/api/simple-upload', upload.single('imageFile'), async (req, res) => {
    console.log('\n=== –ü–†–û–°–¢–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===');
    console.log('–í—Ä–µ–º—è:', new Date().toISOString());
    console.log('req.body:', req.body);
    console.log('req.file:', req.file ? {
        fieldname: req.file.fieldname,
        originalname: req.file.originalname,
        mimetype: req.file.mimetype,
        size: req.file.size
    } : '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    try {
        const { folderName } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!folderName || !req.file) {
            return res.status(400).json({
                success: false,
                error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (!req.file.mimetype.startsWith('image/')) {
            return res.status(400).json({
                success: false,
                error: '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
            });
        }
        
        console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        
        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏
        const safeFolderName = folderName.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø_-]/g, '_');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        const projectsDir = path.join(__dirname, 'pic2', 'projects');
        const projectFolderPath = path.join(projectsDir, safeFolderName);
        
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏:', projectFolderPath);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É projects –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(projectsDir)) {
            console.log('–°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É projects');
            fs.mkdirSync(projectsDir, { recursive: true });
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(projectFolderPath)) {
            console.log('–°–æ–∑–¥–∞—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞');
            fs.mkdirSync(projectFolderPath, { recursive: true });
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const timestamp = Date.now();
        const fileExtension = path.extname(req.file.originalname);
        const safeFileName = `image_${timestamp}${fileExtension}`;
        const fullFilePath = path.join(projectFolderPath, safeFileName);
        
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fullFilePath);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(fullFilePath, req.file.buffer);
        
        // –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        const webPath = `/pic2/projects/${safeFolderName}/${safeFileName}`;
        
        console.log('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('–í–µ–±-–ø—É—Ç—å:', webPath);
        
        res.json({
            success: true,
            message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
            folderPath: `pic2/projects/${safeFolderName}`,
            fileName: safeFileName,
            fullPath: fullFilePath,
            webPath: webPath,
            fileSize: req.file.size,
            originalName: req.file.originalname
        });
        
    } catch (error) {
        console.error('\n=== –û–®–ò–ë–ö–ê –ü–†–û–°–¢–û–ô –ó–ê–ì–†–£–ó–ö–ò ===');
        console.error('–í—Ä–µ–º—è:', new Date().toISOString());
        console.error('–û—à–∏–±–∫–∞:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
        
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ' + error.message
        });
    }
});

// ------------ GENAPI AI DESIGN API ------------

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GenAPI (Flux Kontext) —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function callGenAPI(imageBase64, prompt, model = 'flux-kontext') {
    console.log('\n--- –í–´–ó–û–í GENAPI ---');
    console.log('–ú–æ–¥–µ–ª—å:', model);
    console.log('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageBase64 ? imageBase64.length : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('–ü—Ä–æ–º—Ç:', prompt);
    console.log('–¢–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', GENAPI_API_KEY ? `${GENAPI_API_KEY.substring(0, 10)}...` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢');
    
    // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¢–û–õ–¨–ö–û –û–î–ò–ù –ó–ê–ü–†–û–°!)
    const API_URL = `https://api.gen-api.ru/api/v1/networks/${model}`;
    console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', API_URL);
    
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–ü–õ–ê–¢–ù–´–ô –∑–∞–ø—Ä–æ—Å)');
        
        const requestBody = JSON.stringify({
            prompt: prompt,
            image: imageBase64 ? `data:image/jpeg;base64,${imageBase64}` : null
        });
        
        console.log('üì¶ –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:', requestBody.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': `Bearer ${GENAPI_API_KEY}`
        };
        
        const startTime = Date.now();
        console.log('‚è±Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GenAPI –≤', new Date().toLocaleTimeString());
        
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: headers,
            body: requestBody
        });
        
        const endTime = Date.now();
        console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}–º—Å`);
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –æ—Ç GenAPI:', errorText);
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const result = await response.json();
        console.log('üìÑ JSON –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(result));
        console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', result);
        
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        if (result.image || result.data?.image || result.result?.image) {
            const imageBase64 = result.image || result.data?.image || result.result?.image;
            console.log('‚úÖ GenAPI –≤–µ—Ä–Ω—É–ª –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É');
            return imageBase64.replace(/^data:image\/[^;]+;base64,/, '');
        }
        
        // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –ø–æ–ª—É—á–∞–µ–º request_id
        if (result.request_id && (result.status === 'processing' || result.status === 'pending')) {
            const requestId = result.request_id;
            console.log('üÜî –ü–æ–ª—É—á–µ–Ω request_id:', requestId);
            console.log('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
            
            // –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ë–ï–°–ü–õ–ê–¢–ù–´–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞)
            return await waitForGeneration(requestId, model);
        }
        
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GenAPI');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ GenAPI:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π)
async function waitForGeneration(requestId, model, maxAttempts = 30) {
    console.log('\n--- –û–ñ–ò–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ì–ï–ù–ï–†–ê–¶–ò–ò ---');
    console.log('Request ID:', requestId);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GenAPI
    const STATUS_URL = `https://api.gen-api.ru/api/v1/request/get/${requestId}`;
    console.log('üåê URL –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', STATUS_URL);
    
    for (let i = 0; i < maxAttempts; i++) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${i + 1}/${maxAttempts} (—á–µ—Ä–µ–∑ 10 —Å–µ–∫)`);
        await new Promise(resolve => setTimeout(resolve, 10000)); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
        
        try {
            const response = await fetch(STATUS_URL, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${GENAPI_API_KEY}`
                }
            });
            
            console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.log(`‚ùå –û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
                continue;
            }
            
            const result = await response.json();
            console.log('üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GenAPI:', JSON.stringify(result, null, 2));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GenAPI
            const status = result.status;
            console.log('üìã –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', status);
            
            if (status === 'success') {
                // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ–ª–µ output
                const output = result.output;
                console.log('üéØ –ù–∞–π–¥–µ–Ω output:', typeof output);
                
                if (output) {
                    // –ï—Å–ª–∏ output —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                    if (typeof output === 'string' && output.length > 100) {
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${output.substring(0, 50)}...`);
                        const cleanImage = output.replace(/^data:image\/[^;]+;base64,/, '');
                        return cleanImage;
                    }
                    // –ï—Å–ª–∏ output —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    else if (typeof output === 'object' && output.image) {
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ output.image: ${output.image.substring(0, 50)}...`);
                        const cleanImage = output.image.replace(/^data:image\/[^;]+;base64,/, '');
                        return cleanImage;
                    }
                    // –ï—Å–ª–∏ output —ç—Ç–æ –º–∞—Å—Å–∏–≤
                    else if (Array.isArray(output) && output.length > 0) {
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ output: ${output[0].substring(0, 50)}...`);
                        const cleanImage = output[0].replace(/^data:image\/[^;]+;base64,/, '');
                        return cleanImage;
                    }
                }
                
                console.log('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å success, –Ω–æ output –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                console.log('üìã –¢–∏–ø output:', typeof output);
                console.log('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ output:', output);
                
            } else if (status === 'failed') {
                const errorMsg = result.result || result.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', errorMsg);
                throw new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${errorMsg}`);
                
            } else if (status === 'processing') {
                console.log('‚è≥ –ó–∞–¥–∞—á–∞ –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...');
                continue;
                
            } else {
                console.log(`ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...`);
                continue;
            }
            
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
        }
    }
    
    console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
}

// ------------ HUGGING FACE AI DESIGN API (LEGACY) ------------

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Hugging Face API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function callHuggingFaceAPI(model, inputs, retries = 3) {
    console.log('\n--- –í–´–ó–û–í HUGGING FACE API ---');
    console.log('–ú–æ–¥–µ–ª—å:', model);
    console.log('–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', typeof inputs === 'string' ? inputs.length : '–Ω–µ —Å—Ç—Ä–æ–∫–∞');
    console.log('–¢–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', HUGGINGFACE_API_KEY ? `${HUGGINGFACE_API_KEY.substring(0, 10)}...` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: –î–ª–∏–Ω–∞ =', HUGGINGFACE_API_KEY ? HUGGINGFACE_API_KEY.length : 0, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('üîç –¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å hf_:', HUGGINGFACE_API_KEY ? HUGGINGFACE_API_KEY.startsWith('hf_') : false);
    
    const API_URL = `https://api-inference.huggingface.co/models/${model}`;
    console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', API_URL);
    
    for (let i = 0; i < retries; i++) {
        try {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries} –≤—ã–∑–æ–≤–∞ API`);
            
            const requestBody = JSON.stringify({ 
                inputs,
                parameters: {
                    negative_prompt: "blurry, low quality, distorted, deformed",
                    num_inference_steps: 20,
                    guidance_scale: 7.5
                }
            });
            console.log('üì¶ –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:', requestBody.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            console.log('üìù –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', requestBody.substring(0, 200));
            
            const headers = {
                'Authorization': `Bearer ${HUGGINGFACE_API_KEY}`,
                'Content-Type': 'application/json',
                'User-Agent': 'AI-Design-App/1.0'
            };
            
            console.log('üîê –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:');
            console.log('  Authorization:', headers.Authorization ? `Bearer ${headers.Authorization.slice(7, 20)}...` : '–ù–ï–¢');
            console.log('  Content-Type:', headers['Content-Type']);
            console.log('  User-Agent:', headers['User-Agent']);
            
            const startTime = Date.now();
            console.log('‚è±Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤', new Date().toLocaleTimeString());
            
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: headers,
                body: requestBody
            });
            
            const endTime = Date.now();
            console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}–º—Å`);
            console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
            
            // –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –æ—Ç–≤–µ—Ç–∞
            console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
            response.headers.forEach((value, key) => {
                console.log(`  ${key}: ${value}`);
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –æ—Ç API:', errorText);
                
                // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
                if (response.status === 401) {
                    console.error('üö´ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API —Ç–æ–∫–µ–Ω–∞');
                } else if (response.status === 403) {
                    console.error('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –í–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
                } else if (response.status === 404) {
                    console.error('üö´ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', model);
                } else if (response.status === 429) {
                    console.error('üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤');
                } else if (response.status === 503) {
                    console.error('üö´ –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –í–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
                }
                
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
            const contentType = response.headers.get('content-type');
            console.log('üìÑ Content-Type –æ—Ç–≤–µ—Ç–∞:', contentType);
            
            if (contentType && contentType.includes('application/json')) {
                const result = await response.json();
                console.log('üìÑ JSON –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø:', typeof result);
                console.log('üìÑ –ö–ª—é—á–∏ JSON –æ—Ç–≤–µ—Ç–∞:', result && typeof result === 'object' ? Object.keys(result) : '–Ω–µ –æ–±—ä–µ–∫—Ç');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏ API –æ—à–∏–±–∫—É "–º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"
                if (result.error) {
                    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ JSON –æ—Ç–≤–µ—Ç–µ:', result.error);
                    if (result.error.includes('loading') || result.error.includes('currently loading')) {
                        console.log(`‚è≥ –ú–æ–¥–µ–ª—å ${model} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º 20 —Å–µ–∫—É–Ω–¥...`);
                        await new Promise(resolve => setTimeout(resolve, 20000));
                        continue;
                    }
                    throw new Error(`API Error: ${result.error}`);
                }
                
                console.log('‚úÖ API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
                return result;
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ ArrayBuffer –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                const arrayBuffer = await response.arrayBuffer();
                console.log('üñºÔ∏è –ü–æ–ª—É—á–µ–Ω ArrayBuffer —Ä–∞–∑–º–µ—Ä–æ–º:', arrayBuffer.byteLength, '–±–∞–π—Ç');
                
                if (arrayBuffer.byteLength === 0) {
                    throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
                }
                
                console.log('‚úÖ API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ArrayBuffer');
                return arrayBuffer;
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HuggingFace API (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries}):`, error.message);
            if (error.stack) {
                console.error('üìç Stack trace:', error.stack);
            }
            
            if (i === retries - 1) {
                console.error('üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É');
                throw error;
            }
            
            const delay = 5000 * (i + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            console.log(`‚è≥ –ñ–¥–µ–º ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}

// API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    console.log('ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', new Date().toISOString());
    
    res.json({ 
        success: true, 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (GenAPI –≥–æ—Ç–æ–≤)',
        version: '2.0.0',
        timestamp: new Date().toISOString(),
        apis: {
            genapi: {
                ready: !!GENAPI_API_KEY,
                tokenLength: GENAPI_API_KEY ? GENAPI_API_KEY.length : 0,
                status: 'active',
                provider: 'gen-api.ru',
                model: 'flux-kontext'
            }
        },
        genapi: {
            ready: !!GENAPI_API_KEY,
            tokenPresent: !!GENAPI_API_KEY,
            tokenLength: GENAPI_API_KEY ? GENAPI_API_KEY.length : 0
        }
    });
});

// API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
app.get('/api/test-models', async (req, res) => {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π HuggingFace:', new Date().toISOString());
    
    const testModels = [
        'black-forest-labs/FLUX.1-dev',
        'lodestones/Chroma', 
        'stabilityai/stable-diffusion-xl-base-1.0',
        'runwayml/stable-diffusion-v1-5',
        'stabilityai/stable-diffusion-2-base'
    ];
    
    const results = {};
    
    for (const model of testModels) {
        try {
            console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: ${model}`);
            const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${HUGGINGFACE_API_KEY}`
                }
            });
            
            results[model] = {
                status: response.status,
                statusText: response.statusText,
                available: response.ok
            };
            
            console.log(`${model}: ${response.status} ${response.statusText}`);
            
        } catch (error) {
            results[model] = {
                status: 'error',
                statusText: error.message,
                available: false
            };
            console.error(`${model}: –û—à–∏–±–∫–∞ - ${error.message}`);
        }
    }
    
    res.json({
        success: true,
        tokenValid: HUGGINGFACE_API_KEY && HUGGINGFACE_API_KEY.startsWith('hf_'),
        models: results,
        timestamp: new Date().toISOString()
    });
});

// API endpoint –¥–ª—è –ò–ò –¥–∏–∑–∞–π–Ω–∞ —á–µ—Ä–µ–∑ GenAPI (Flux Kontext)
app.post('/api/ai-design-genapi', upload.single('image'), async (req, res) => {
    console.log('\nüöÄ === GENAPI –ò–ò –î–ò–ó–ê–ô–ù (FLUX KONTEXT) ===');
    console.log('–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:', new Date().toISOString());
    console.log('IP –∫–ª–∏–µ–Ω—Ç–∞:', req.ip || req.connection.remoteAddress);
    
    try {
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        console.log('req.body:', req.body);
        console.log('req.file:', req.file ? {
            fieldname: req.file.fieldname,
            originalname: req.file.originalname,
            mimetype: req.file.mimetype,
            size: req.file.size
        } : '–ù–ï–¢ –§–ê–ô–õ–ê');
        
        if (!req.file) {
            console.log('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return res.status(400).json({ 
                success: false, 
                error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' 
            });
        }

        const { style, prompt } = req.body;
        
        if (!style || !prompt) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { style, prompt });
            return res.status(400).json({ 
                success: false, 
                error: '–°—Ç–∏–ª—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { 
            style, 
            prompt, 
            fileSize: req.file.size,
            fileName: req.file.originalname,
            mimeType: req.file.mimetype
        });

        const base64Image = req.file.buffer.toString('base64');
        console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64, —Ä–∞–∑–º–µ—Ä:', base64Image.length);

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è —Å—Ç–∏–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ Flux Kontext)
        const stylePrompts = {
            'minimalist': '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –º–µ–±–µ–ª—å –∏ –¥–µ–∫–æ—Ä, —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞, –ø—Ä–æ—Å—Ç—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            'scandinavian': '—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è –º–µ–±–µ–ª—å, —Å–≤–µ—Ç–ª–æ–µ –¥–µ—Ä–µ–≤–æ, –±–µ–ª—ã–µ –∏ –±–µ–∂–µ–≤—ã–µ —Ü–≤–µ—Ç–∞, —É—é—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–∏–ª—å',
            'industrial': '–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å, –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç–µ–º–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞, –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'loft': '–ª–æ—Ñ—Ç–æ–≤–∞—è –º–µ–±–µ–ª—å –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—Ä–±–∞–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–∫–æ—Ä, –∫–∏—Ä–ø–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏',
            'modern': '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã',
            'contemporary': '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å –∏ –¥–µ–∫–æ—Ä, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã, —Å—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            'classic': '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–µ–±–µ–ª—å, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ–∫–æ—Ä–∞, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'neoclassic': '–Ω–µ–æ–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–µ–±–µ–ª—å –∏ –¥–µ–∫–æ—Ä, —Ä–æ—Å–∫–æ—à–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –∏–∑—ã—Å–∫–∞–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞',
            'provence': '–º–µ–±–µ–ª—å –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ–≤–∞–Ω—Å, –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π —à–∞—Ä–º, —Å–≤–µ—Ç–ª–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞, –≤–∏–Ω—Ç–∞–∂–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            'art-deco': '–º–µ–±–µ–ª—å –∏ —É–∑–æ—Ä—ã –∞—Ä—Ç-–¥–µ–∫–æ, –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è, —Ä–æ—Å–∫–æ—à–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ç–¥–µ–ª–∫–∞',
            'vintage': '–≤–∏–Ω—Ç–∞–∂–Ω–∞—è –º–µ–±–µ–ª—å, —Ä–µ—Ç—Ä–æ –¥–µ–∫–æ—Ä, –Ω–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            'japanese': '—è–ø–æ–Ω—Å–∫–∞—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –º–µ–±–µ–ª—å, –¥–∑–µ–Ω —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ–∫–æ—Ä–∞, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'high-tech': '—Ö–∞–π-—Ç–µ–∫ –º–µ–±–µ–ª—å, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
            'rustic': '–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è –º–µ–±–µ–ª—å, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–Ω—Ç—Ä–∏ –¥–µ–∫–æ—Ä–∞',
            'mediterranean': '—Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –º–µ–±–µ–ª—å –∏ —Ç–µ–∫—Å—Ç–∏–ª—å, —Ç–µ–ø–ª–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã',
            'boho': '–±–æ–≥–µ–º–Ω–∞—è –º–µ–±–µ–ª—å –∏ —Ç–µ–∫—Å—Ç–∏–ª—å, —ç–∫–ª–µ–∫—Ç–∏—á–Ω—ã–π –º–∏–∫—Å –¥–µ–∫–æ—Ä–∞, —Ü–≤–µ—Ç–Ω—ã–µ —Ç–∫–∞–Ω–µ–≤—ã–µ —É–∑–æ—Ä—ã',
            'eclectic': '—ç–∫–ª–µ–∫—Ç–∏—á–Ω—ã–π –º–∏–∫—Å –º–µ–±–µ–ª–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–µ–∫–æ—Ä–∞, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
            'tropical': '—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∞—è –º–µ–±–µ–ª—å, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∑–µ–ª–µ–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –¥–µ–∫–æ—Ä–µ',
            'coastal': '–ø—Ä–∏–±—Ä–µ–∂–Ω–∞—è –º–µ–±–µ–ª—å, —Å–≤–µ—Ç–ª–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞, –¥–µ–∫–æ—Ä –≤ –º–æ—Ä—Å–∫–æ–º —Å—Ç–∏–ª–µ',
            'mid-century': '–º–µ–±–µ–ª—å —Å–µ—Ä–µ–¥–∏–Ω—ã –≤–µ–∫–∞, —Ä–µ—Ç—Ä–æ —Å—Ç–∏–ª—å –¥–µ–∫–æ—Ä–∞, –≤–∏–Ω—Ç–∞–∂–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞'
        };

        const styleDescription = stylePrompts[style] || `–∏–Ω—Ç–µ—Ä—å–µ—Ä –≤ —Å—Ç–∏–ª–µ ${style}`;
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è Flux Kontext —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        const enhancedPrompt = `–ò–∑–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –º–µ–±–µ–ª—å –∏ –¥–µ–∫–æ—Ä –Ω–∞ ${styleDescription}. ${prompt}. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —Å—Ç–µ–Ω—ã, –æ–∫–Ω–∞, –¥–≤–µ—Ä–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∫–æ–º–Ω–∞—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ù–µ –ø–µ—Ä–µ–º–µ—â–∞–π –∏ –Ω–µ —É–¥–∞–ª—è–π —Å—Ç–µ–Ω—ã. –ò–∑–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, —Ü–≤–µ—Ç–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ.`;
        
        console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Flux Kontext...');
        console.log('–ü—Ä–æ–º—Ç:', enhancedPrompt);

        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º GenAPI —Ç–æ–∫–µ–Ω:', GENAPI_API_KEY ? '–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω' : '–¢–æ–∫–µ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω');
            
            if (!GENAPI_API_KEY) {
                throw new Error('GenAPI —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            }
            
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GenAPI...');
            
            const editedImageBase64 = await callGenAPI(base64Image, enhancedPrompt, 'flux-kontext');
            
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ GenAPI');
            
            res.json({
                success: true,
                message: '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å –ø–æ–º–æ—â—å—é Flux Kontext',
                originalImage: `data:image/jpeg;base64,${base64Image}`,
                editedImage: `data:image/png;base64,${editedImageBase64}`,
                style: style,
                prompt: prompt,
                model: 'flux-kontext',
                provider: 'GenAPI'
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ GenAPI:', error.message);
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É...');
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try {
                const canvas = require('canvas');
                const canvasObj = canvas.createCanvas(512, 512);
                const ctx = canvasObj.getContext('2d');
                
                // –§–æ–Ω
                const gradient = ctx.createLinearGradient(0, 0, 512, 512);
                gradient.addColorStop(0, '#f8f9fa');
                gradient.addColorStop(1, '#e9ecef');
                ctx.fillStyle = gradient;
                ctx.fillRect(0, 0, 512, 512);
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                ctx.fillStyle = '#495057';
                ctx.font = 'bold 24px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('Flux Kontext –ò–ò –î–∏–∑–∞–π–Ω', 256, 80);
                
                // –°—Ç–∏–ª—å
                ctx.font = '18px Arial';
                ctx.fillText(`–°—Ç–∏–ª—å: ${style}`, 256, 120);
                
                // –í—Ä–µ–º—è
                ctx.font = '14px Arial';
                ctx.fillStyle = '#6c757d';
                ctx.fillText(new Date().toLocaleString(), 256, 150);
                
                // –°—Ç–∞—Ç—É—Å
                ctx.fillStyle = '#dc3545';
                ctx.font = 'bold 16px Arial';
                ctx.fillText('–î–µ–º–æ —Ä–µ–∂–∏–º', 256, 200);
                ctx.fillText('(–Ω—É–∂–µ–Ω GenAPI —Ç–æ–∫–µ–Ω)', 256, 220);
                
                const placeholderBase64 = canvasObj.toBuffer().toString('base64');
                
                res.json({
                    success: true,
                    message: '–î–µ–º–æ —Ä–µ–∂–∏–º - –Ω—É–∂–µ–Ω GenAPI —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                    originalImage: `data:image/jpeg;base64,${base64Image}`,
                    editedImage: `data:image/png;base64,${placeholderBase64}`,
                    style: style,
                    prompt: prompt,
                    model: 'flux-kontext',
                    provider: 'GenAPI (demo)',
                    demo: true,
                    error: error.message
                });
                
            } catch (canvasError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏:', canvasError);
                throw error; // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            }
        }

    } catch (error) {
        console.error('\n‚ùå === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===');
        console.error('–í—Ä–µ–º—è:', new Date().toISOString());
        console.error('–û—à–∏–±–∫–∞:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
        
        res.status(500).json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// API endpoint –¥–ª—è –ò–ò –¥–∏–∑–∞–π–Ω–∞ —á–µ—Ä–µ–∑ Hugging Face (LEGACY)
app.post('/api/ai-design-huggingface', upload.single('image'), async (req, res) => {
    console.log('\nüöÄ === HUGGING FACE –ò–ò –î–ò–ó–ê–ô–ù ===');
    console.log('–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:', new Date().toISOString());
    console.log('IP –∫–ª–∏–µ–Ω—Ç–∞:', req.ip || req.connection.remoteAddress);
    console.log('User-Agent:', req.get('User-Agent'));
    console.log('Content-Type:', req.get('Content-Type'));
    
    try {
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        console.log('req.body:', req.body);
        console.log('req.file:', req.file ? {
            fieldname: req.file.fieldname,
            originalname: req.file.originalname,
            mimetype: req.file.mimetype,
            size: req.file.size
        } : '–ù–ï–¢ –§–ê–ô–õ–ê');
        
        if (!req.file) {
            console.log('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return res.status(400).json({ 
                success: false, 
                error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' 
            });
        }

        const { style, prompt } = req.body;
        
        if (!style || !prompt) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { style, prompt });
            return res.status(400).json({ 
                success: false, 
                error: '–°—Ç–∏–ª—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { 
            style, 
            prompt, 
            fileSize: req.file.size,
            fileName: req.file.originalname,
            mimeType: req.file.mimetype
        });

        const base64Image = req.file.buffer.toString('base64');

        // –®–∞–≥ 1: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        console.log('–®–∞–≥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        let analysis = 'interior room with furniture and decor elements';
        console.log('–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–∞–∑–æ–≤—ã–π):', analysis);

        // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è —Å—Ç–∏–ª—è
        const stylePrompts = {
            'minimalist': 'minimalist furniture and decor, clean lines, neutral color palette, simple accessories',
            'scandinavian': 'scandinavian furniture style, light wood textures, white and beige colors, cozy textiles',
            'industrial': 'industrial style furniture, metal fixtures, dark color scheme, exposed materials',
            'loft': 'loft style furniture and lighting, urban decor elements, brick textures, modern fixtures',
            'modern': 'modern furniture design, sleek accessories, contemporary lighting, geometric shapes',
            'contemporary': 'contemporary furniture and decor, current design trends, stylish accessories',
            'classic': 'classic furniture style, traditional decor elements, elegant accessories, refined materials',
            'neoclassic': 'neoclassic furniture and decor, luxury accessories, sophisticated color scheme',
            'provence': 'provence style furniture, rustic charm decor, light color palette, vintage accessories',
            'art-deco': 'art-deco furniture and patterns, geometric decorations, luxury materials and finishes',
            'vintage': 'vintage furniture pieces, retro decor items, nostalgic color scheme, classic accessories',
            'japanese': 'japanese minimalist furniture, zen decor elements, natural material textures',
            'high-tech': 'high-tech furniture design, modern technology integration, futuristic lighting',
            'rustic': 'rustic furniture style, natural material textures, country decor elements',
            'mediterranean': 'mediterranean furniture and textiles, warm color palette, natural textures',
            'boho': 'bohemian furniture and textiles, eclectic decor mix, colorful fabric patterns',
            'eclectic': 'eclectic furniture mix, unique decor combinations, varied style elements',
            'tropical': 'tropical furniture style, natural material textures, green plant decorations',
            'coastal': 'coastal furniture design, light color scheme, beach-inspired decor elements',
            'mid-century': 'mid-century furniture pieces, retro decor style, vintage color palette'
        };

        const styleDescription = stylePrompts[style] || `${style} interior design style`;
        
        // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        const enhancedPrompt = `Interior design transformation: ${styleDescription}. ${prompt}. IMPORTANT: Keep existing wall layout, room proportions, and architectural structure UNCHANGED. Only modify furniture, decorations, colors, textures, and lighting. Maintain the original room boundaries and wall positions. Do not move or remove walls. Professional interior photography, realistic lighting, high quality rendering.`;
        
        console.log('–®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        console.log('–ü—Ä–æ–º—Ç:', enhancedPrompt);

        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º API
        console.log('üéØ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å: stable-diffusion-v1-5');
        
        let editedImageBase64; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω:', process.env.HUGGINGFACE_API_KEY ? '–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω' : '–¢–æ–∫–µ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω');
            console.log('üîç –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', process.env.HUGGINGFACE_API_KEY ? process.env.HUGGINGFACE_API_KEY.length : 0);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å Stable Diffusion
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API...');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ê–ö–¢–£–ê–õ–¨–ù–´–• –∏ –†–ê–ë–û–¢–ê–Æ–©–ò–• –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            const modelsToTry = [
                'black-forest-labs/FLUX.1-dev',        // –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è (1.68M –∑–∞–≥—Ä—É–∑–æ–∫)
                'lodestones/Chroma',                    // –ù–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
                'stabilityai/stable-diffusion-xl-base-1.0',  // –ë–∞–∑–æ–≤–∞—è SDXL
                'runwayml/stable-diffusion-v1-5',      // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è SD 1.5
                'stabilityai/stable-diffusion-2-1'     // SD 2.1
            ];
            
            let generationResult = null;
            let lastError = null;
            
            for (const model of modelsToTry) {
                try {
                    console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: ${model}`);
                    generationResult = await callHuggingFaceAPI(model, enhancedPrompt);
                    console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${model} —Å—Ä–∞–±–æ—Ç–∞–ª–∞!`);
                    break;
                } catch (error) {
                    console.log(`‚ùå –ú–æ–¥–µ–ª—å ${model} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${error.message}`);
                    lastError = error;
                    continue;
                }
            }
            
            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            if (!generationResult) {
                console.log('üîÑ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...');
                const simpleModels = [
                    'google/ddpm-cifar10-32',              // –ü—Ä–æ—Å—Ç–∞—è –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
                    'microsoft/DialoGPT-medium',            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
                    'stabilityai/stable-diffusion-2-base'   // –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è SD2
                ];
                
                for (const model of simpleModels) {
                    try {
                        console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å: ${model}`);
                        generationResult = await callHuggingFaceAPI(model, enhancedPrompt);
                        console.log(`‚úÖ –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å ${model} —Å—Ä–∞–±–æ—Ç–∞–ª–∞!`);
                        break;
                    } catch (error) {
                        console.log(`‚ùå –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å ${model} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${error.message}`);
                        continue;
                    }
                }
            }
            
            if (!generationResult) {
                throw lastError || new Error('–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞');
            }

            if (generationResult instanceof ArrayBuffer) {
                editedImageBase64 = Buffer.from(generationResult).toString('base64');
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä:', generationResult.byteLength, '–±–∞–π—Ç');
            } else {
                throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É...');
            
            try {
                // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
                const canvas = require('canvas');
                const canvasObj = canvas.createCanvas(512, 512);
                const ctx = canvasObj.getContext('2d');
                
                // –§–æ–Ω
                const gradient = ctx.createLinearGradient(0, 0, 512, 512);
                gradient.addColorStop(0, '#f8f9fa');
                gradient.addColorStop(1, '#e9ecef');
                ctx.fillStyle = gradient;
                ctx.fillRect(0, 0, 512, 512);
                
                // –†–∞–º–∫–∞
                ctx.strokeStyle = '#6c757d';
                ctx.lineWidth = 2;
                ctx.strokeRect(10, 10, 492, 492);
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                ctx.fillStyle = '#495057';
                ctx.font = 'bold 24px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('–ò–ò –î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞', 256, 80);
                
                // –°—Ç–∏–ª—å
                ctx.font = '18px Arial';
                ctx.fillText(`–°—Ç–∏–ª—å: ${style}`, 256, 120);
                
                // –í—Ä–µ–º—è
                ctx.font = '14px Arial';
                ctx.fillStyle = '#6c757d';
                ctx.fillText(new Date().toLocaleString(), 256, 150);
                
                // –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞
                ctx.fillStyle = '#dee2e6';
                ctx.fillRect(50, 180, 412, 250);
                
                // –ú–µ–±–µ–ª—å (–ø—Ä–æ—Å—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
                ctx.fillStyle = '#adb5bd';
                ctx.fillRect(100, 350, 80, 40); // –¥–∏–≤–∞–Ω
                ctx.fillRect(250, 200, 60, 60); // —Å—Ç–æ–ª
                ctx.fillRect(350, 220, 40, 120); // —à–∫–∞—Ñ
                
                // –û–∫–Ω–æ
                ctx.fillStyle = '#cfe2ff';
                ctx.fillRect(380, 190, 60, 80);
                
                // –¢–µ–∫—Å—Ç —Å–Ω–∏–∑—É
                ctx.fillStyle = '#495057';
                ctx.font = '16px Arial';
                ctx.fillText('–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–∏–∑–∞–π–Ω–∞', 256, 460);
                ctx.font = '12px Arial';
                ctx.fillStyle = '#6c757d';
                ctx.fillText('–†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 256, 480);
                
                const buffer = canvasObj.toBuffer('image/png');
                editedImageBase64 = buffer.toString('base64');
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ PNG –∑–∞–≥–ª—É—à–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º:', buffer.length, '–±–∞–π—Ç');
            } catch (canvasError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è canvas:', canvasError.message);
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—Ä–æ—Å—Ç–∞—è SVG –∑–∞–≥–ª—É—à–∫–∞
                const simpleSvg = `<svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
                    <rect width="100%" height="100%" fill="#f8f9fa"/>
                    <text x="256" y="256" text-anchor="middle" font-family="Arial" font-size="18" fill="#495057">
                        –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    </text>
                </svg>`;
                editedImageBase64 = Buffer.from(simpleSvg).toString('base64');
                console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è SVG –∑–∞–≥–ª—É—à–∫–∞');
            }
        }

        console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        res.json({
            success: true,
            originalImage: `data:${req.file.mimetype};base64,${base64Image}`,
            editedImage: `data:image/png;base64,${editedImageBase64}`,
            analysis: analysis,
            enhancedPrompt: enhancedPrompt,
            style: style,
            prompt: prompt,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('\n=== –û–®–ò–ë–ö–ê HUGGING FACE ===');
        console.error('–í—Ä–µ–º—è:', new Date().toISOString());
        console.error('–û—à–∏–±–∫–∞:', error.message);
        
        let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        
        if (error.message.includes('rate limit') || error.message.includes('429')) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
        } else if (error.message.includes('loading') || error.message.includes('503')) {
            errorMessage = '–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.';
        } else if (error.message.includes('timeout')) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        } else if (error.message.includes('401') || error.message.includes('403')) {
            errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.';
        }
        
        res.status(500).json({ 
            success: false, 
            error: errorMessage,
            details: error.message 
        });
    }
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
app.get('/api/db/projects', async (req, res) => {
    console.log('–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', new Date().toISOString());
    try {
        const projects = await db.query('SELECT * FROM projects');
        console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
        res.json({ success: true, projects, count: projects.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.get('/api/db/projects/:id', async (req, res) => {
    console.log(`–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–∞ ID: ${req.params.id}`, new Date().toISOString());
    try {
        const project = await db.getOne('SELECT * FROM projects WHERE id = ?', [req.params.id]);
        
        if (!project) {
            console.log(`–ü—Ä–æ–µ–∫—Ç —Å ID ${req.params.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(404).json({ success: false, error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        console.log('–ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç:', project.title);

        // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const contentBlocks = await db.query(
            'SELECT * FROM project_content_blocks WHERE project_id = ? ORDER BY sort_order',
            [req.params.id]
        );

        console.log(`–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentBlocks.length}`);

        res.json({
            success: true,
            project: {
                ...project,
                contentBlocks
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
app.delete('/api/db/projects/:id', async (req, res) => {
    console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ID: ${req.params.id}`, new Date().toISOString());
    try {
        const projectId = req.params.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        const project = await db.getOne('SELECT * FROM projects WHERE id = ?', [projectId]);
        if (!project) {
            console.log(`–ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(404).json({ 
                success: false, 
                error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        console.log(`–£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç: ${project.title}`);
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await db.query('DELETE FROM project_content_blocks WHERE project_id = ?', [projectId]);
        console.log('–£–¥–∞–ª–µ–Ω—ã –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞');
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã images
        await db.query('DELETE FROM images WHERE entity_type = "project" AND entity_id = ?', [projectId]);
        console.log('–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞');
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
        await db.query('DELETE FROM projects WHERE id = ?', [projectId]);
        console.log('–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        
        res.json({ 
            success: true, 
            message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
            projectId: parseInt(projectId)
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—å—è–º–∏ (–±–∞–∑–æ–≤—ã–µ, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è)
app.get('/api/db/articles', async (req, res) => {
    try {
        const articles = await db.query('SELECT * FROM articles');
        res.json({ success: true, articles });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.get('/api/db/articles/:id', async (req, res) => {
    try {
        const article = await db.getOne('SELECT * FROM articles WHERE id = ?', [req.params.id]);
        
        if (!article) {
            return res.status(404).json({ success: false, error: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
        const images = await db.query(
            'SELECT * FROM images WHERE entity_type = "article" AND entity_id = ?',
            [req.params.id]
        );

        // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—å–∏
        const contentBlocks = await db.query(
            'SELECT * FROM content_blocks WHERE entity_type = "article" AND entity_id = ? ORDER BY sort_order',
            [req.params.id]
        );

        // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ —Å—Ç–∞—Ç—å–∏
        const architects = await db.query(
            `SELECT a.* FROM architects a
             JOIN article_architects aa ON a.id = aa.architect_id
             WHERE aa.article_id = ?`,
            [req.params.id]
        );

        res.json({
            success: true,
            article: {
                ...article,
                images,
                contentBlocks,
                architects
            }
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
app.get('/api/db/admins', async (req, res) => {
    try {
        const admins = await db.query('SELECT id, username, email, full_name, role FROM admins ORDER BY username');
        res.json({ success: true, admins });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.post('/api/db/admins', async (req, res) => {
    try {
        const { username, password, email, full_name, role } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!username || !password || !email || !role) {
            return res.status(400).json({ 
                success: false, 
                error: '–õ–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, email –∏ —Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏
        const allowedRoles = ['admin', 'editor', 'viewer'];
        if (!allowedRoles.includes(role)) {
            return res.status(400).json({ 
                success: false, 
                error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å' 
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
        const existingUsername = await db.getOne('SELECT id FROM admins WHERE username = ?', [username]);
        if (existingUsername) {
            return res.status(400).json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
        const existingEmail = await db.getOne('SELECT id FROM admins WHERE email = ?', [email]);
        if (existingEmail) {
            return res.status(400).json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            });
        }
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é SHA256
        const passwordHash = crypto.createHash('sha256').update(password).digest('hex');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        const adminData = {
            username: username.trim(),
            password_hash: passwordHash,
            email: email.trim(),
            full_name: full_name ? full_name.trim() : null,
            role: role
        };
        
        const adminId = await db.insert('admins', adminData);
        
        console.log(`–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: ID=${adminId}, username=${username}, role=${role}`);
        
        res.json({ 
            success: true, 
            adminId,
            message: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            admin: {
                id: adminId,
                username: adminData.username,
                email: adminData.email,
                full_name: adminData.full_name,
                role: adminData.role
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.delete('/api/db/admins/:id', async (req, res) => {
    try {
        const adminId = req.params.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const admin = await db.getOne('SELECT * FROM admins WHERE id = ?', [adminId]);
        if (!admin) {
            return res.status(404).json({ 
                success: false, 
                error: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        // –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const deleted = await db.remove('admins', 'id = ?', [adminId]);
        
        if (deleted > 0) {
            console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω: ID=${adminId}, username=${admin.username}`);
            res.json({ 
                success: true, 
                message: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' 
            });
        } else {
            res.status(500).json({ 
                success: false, 
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
app.post('/api/admin/login', async (req, res) => {
    try {
        const { username, password, remember } = req.body;
        
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { username, remember });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!username || !password) {
            console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            return res.status(400).json({ 
                success: false, 
                error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const admin = await db.getOne(
            'SELECT * FROM admins WHERE username = ? OR email = ?', 
            [username, username]
        );
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞:', admin ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        if (!admin) {
            console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
            return res.status(401).json({ 
                success: false, 
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (—Ö–µ—à–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ö–µ—à–µ–º –≤ –ë–î)
        const passwordHash = crypto.createHash('sha256').update(password).digest('hex');
        
        console.log('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π:', {
            –≤–≤–µ–¥–µ–Ω–Ω—ã–π: passwordHash,
            –∏–∑–ë–î: admin.password_hash,
            —Å–æ–≤–ø–∞–¥–∞—é—Ç: admin.password_hash === passwordHash
        });
        
        if (admin.password_hash !== passwordHash) {
            console.log('–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
            return res.status(401).json({ 
                success: false, 
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
            });
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        req.session.adminId = admin.id;
        req.session.adminUsername = admin.username;
        req.session.adminRole = admin.role;
        req.session.isAuthenticated = true;
        
        console.log('–°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', {
            adminId: req.session.adminId,
            username: req.session.adminUsername,
            isAuthenticated: req.session.isAuthenticated
        });
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏
        if (remember) {
            req.session.cookie.maxAge = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π
            console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        try {
            await db.query(
                'UPDATE admins SET last_login = NOW() WHERE id = ?', 
                [admin.id]
            );
            console.log('–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (updateError) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞:', updateError);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
        
        console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', admin.username);
        
        res.json({ 
            success: true, 
            message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            admin: {
                id: admin.id,
                username: admin.username,
                full_name: admin.full_name,
                role: admin.role
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message 
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
app.get('/api/admin/check-session', (req, res) => {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏:', {
        sessionExists: !!req.session,
        isAuthenticated: req.session?.isAuthenticated,
        adminId: req.session?.adminId
    });
    
    if (req.session && req.session.isAuthenticated) {
        console.log('–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è:', req.session.adminUsername);
        res.json({ 
            authenticated: true, 
            admin: {
                id: req.session.adminId,
                username: req.session.adminUsername,
                role: req.session.adminRole
            }
        });
    } else {
        console.log('–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
        res.json({ authenticated: false });
    }
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
app.post('/api/admin/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            return res.status(500).json({ 
                success: false, 
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' 
            });
        }
        res.clearCookie('connect.sid'); // –û—á–∏—â–∞–µ–º cookie —Å–µ—Å—Å–∏–∏
        res.json({ 
            success: true, 
            message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
        });
    });
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth(req, res, next) {
    if (req.session && req.session.isAuthenticated) {
        next();
    } else {
        res.status(401).json({ 
            success: false, 
            error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
        });
    }
}

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏/–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞–º–∏
app.get('/api/db/architects', async (req, res) => {
    try {
        const architects = await db.query('SELECT * FROM architects');
        res.json({ success: true, architects });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.get('/api/db/architects/:id', async (req, res) => {
    try {
        const architect = await db.getOne('SELECT * FROM architects WHERE id = ?', [req.params.id]);
        
        if (!architect) {
            return res.status(404).json({ success: false, error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        const projects = await db.query(
            `SELECT p.* FROM projects p
             JOIN project_architects pa ON p.id = pa.project_id
             WHERE pa.architect_id = ?`,
            [req.params.id]
        );

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏, –∞–≤—Ç–æ—Ä–æ–º –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        const articles = await db.query(
            `SELECT a.* FROM articles a
             JOIN article_architects aa ON a.id = aa.article_id
             WHERE aa.architect_id = ?`,
            [req.params.id]
        );

        res.json({
            success: true,
            architect: {
                ...architect,
                projects,
                articles
            }
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–µ–π—Å–æ–≤
app.get('/api/db/cases', async (req, res) => {
    try {
        const cases = await db.query(`
            SELECT entity_id, url, alt_text, title, sort_order
            FROM images 
            WHERE entity_type = 'case' 
            ORDER BY sort_order
        `);
        
        res.json({ success: true, cases });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ª—É–≥
app.get('/api/services', async (req, res) => {
    try {
        const servicesImages = await db.query(
            'SELECT id, title, alt_text, direct_url, entity_type FROM images WHERE entity_id = ? ORDER BY id',
            [101]
        );
        
        console.log('–ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ª—É–≥, –Ω–∞–π–¥–µ–Ω–æ:', servicesImages.length);
        
        res.json({
            success: true,
            data: servicesImages,
            count: servicesImages.length
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ª—É–≥:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ª—É–≥'
        });
    }
});

// ------------ API –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ ------------

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
app.get('/api/portfolio', async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (houses, apartments, offices)
        const images = await db.query(`
            SELECT 
                id,
                url,
                alt_text,
                title,
                entity_type,
                entity_id,
                direct_url
            FROM images 
            WHERE entity_type IN ('houses', 'apartments', 'offices')
            ORDER BY entity_id, id
        `);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        const portfolio = {
            all: [],
            apartments: [],
            houses: [],
            offices: []
        };
        
        images.forEach(image => {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä)
            portfolio.all.push(image);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if (image.entity_type === 'apartments') {
                portfolio.apartments.push(image);
            } else if (image.entity_type === 'houses') {
                portfolio.houses.push(image);
            } else if (image.entity_type === 'offices') {
                portfolio.offices.push(image);
            }
        });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${images.length}`);
        console.log(`–ö–≤–∞—Ä—Ç–∏—Ä—ã: ${portfolio.apartments.length}, –î–æ–º–∞: ${portfolio.houses.length}, –û—Ñ–∏—Å—ã: ${portfolio.offices.length}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        res.json({
            success: true,
            data: portfolio,
            total: images.length,
            counts: {
                all: portfolio.all.length,
                apartments: portfolio.apartments.length,
                houses: portfolio.houses.length,
                offices: portfolio.offices.length
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
app.get('/api/portfolio/:id', async (req, res) => {
    try {
        const projectId = req.params.id;
        console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å ID: ${projectId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        const image = await db.getOne(`
            SELECT 
                id,
                url,
                alt_text,
                title,
                entity_type,
                entity_id,
                direct_url
            FROM images 
            WHERE id = ?
        `, [projectId]);
        
        if (!image) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        res.json({
            success: true,
            data: image
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message
        });
    }
});

// ------------ –ö–æ–Ω–µ—Ü API –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ ------------

// ------------ –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ------------

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug
function transliterate(text) {
    const ru = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
        '–µ': 'e', '—ë': 'e', '–∂': 'zh', '–∑': 'z', '–∏': 'i',
        '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
        '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
        '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch',
        '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '',
        '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D',
        '–ï': 'E', '–Å': 'E', '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I',
        '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N',
        '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T',
        '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'C', '–ß': 'Ch',
        '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '',
        '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    };
    
    let slug = text.split('').map(char => ru[char] || char).join('');
    slug = slug.toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '') // –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
        .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        .replace(/-+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –æ–¥–∏–Ω
        .replace(/^-+|-+$/g, ''); // –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    
    return slug;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
function getDirectImageUrl(publicUrl) {
    if (!publicUrl) return null;
    
    try {
        // –ú–µ—Ç–æ–¥ 1: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º download —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
        const match = publicUrl.match(/\/([a-zA-Z0-9%+/=]+)$/);
        if (match && match[1]) {
            const publicKey = decodeURIComponent(match[1]);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö URL
            const downloadOptions = [
                // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ download API (—Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è)
                `https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=${encodeURIComponent(publicUrl)}`,
                // –í–∞—Ä–∏–∞–Ω—Ç 2: Preview URL –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                `https://downloader.disk.yandex.ru/preview?url=ya-disk-public%3A%2F%2F${encodeURIComponent(publicKey)}&crop=0&size=1920x1080`,
                // –í–∞—Ä–∏–∞–Ω—Ç 3: Preview URL –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞ (–ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
                `https://downloader.disk.yandex.ru/preview?url=ya-disk-public%3A%2F%2F${encodeURIComponent(publicKey)}&crop=0`,
                // –í–∞—Ä–∏–∞–Ω—Ç 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                `https://downloader.disk.yandex.ru/preview?url=ya-disk-public%3A%2F%2F${publicKey}&crop=0&size=XXL`
            ];
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ URL
            return downloadOptions[1]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º preview —Å —Ä–∞–∑–º–µ—Ä–æ–º –∫–∞–∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É
        return publicUrl;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return publicUrl;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
async function getActualDownloadUrl(publicUrl) {
    try {
        console.log('–ü–æ–ª—É—á–∞—é –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è:', publicUrl);
        
        // –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
        const downloadResponse = await axios.get(
            `https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=${encodeURIComponent(publicUrl)}`,
            {
                headers: {
                    'Authorization': `OAuth ${YANDEX_TOKEN}`
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            }
        );
        
        if (downloadResponse.data && downloadResponse.data.href) {
            console.log('–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä—è–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ API –∑–∞–≥—Ä—É–∑–∫–∏');
            return downloadResponse.data.href;
        }
        
        throw new Error('API –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É');
        
    } catch (apiError) {
        console.log('–û—à–∏–±–∫–∞ API –∑–∞–≥—Ä—É–∑–∫–∏:', apiError.message);
        
        try {
            // –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ preview API —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            const match = publicUrl.match(/\/([a-zA-Z0-9%+/=]+)$/);
            if (match && match[1]) {
                const publicKey = decodeURIComponent(match[1]);
                
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const previewUrls = [
                    `https://downloader.disk.yandex.ru/preview?url=ya-disk-public%3A%2F%2F${encodeURIComponent(publicKey)}&crop=0&size=XXXL`,
                    `https://downloader.disk.yandex.ru/preview?url=ya-disk-public%3A%2F%2F${encodeURIComponent(publicKey)}&crop=0&size=XXL`,
                    `https://downloader.disk.yandex.ru/preview?url=ya-disk-public%3A%2F%2F${encodeURIComponent(publicKey)}&crop=0&size=1920x1080`,
                    `https://downloader.disk.yandex.ru/preview?url=ya-disk-public%3A%2F%2F${encodeURIComponent(publicKey)}&crop=0`
                ];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π URL –ø–æ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                for (const previewUrl of previewUrls) {
                    try {
                        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ preview API:', previewUrl);
                        const testResponse = await axios.head(previewUrl, { timeout: 5000 });
                        if (testResponse.status === 200) {
                            console.log('Preview URL —Ä–∞–±–æ—Ç–∞–µ—Ç:', previewUrl);
                            return previewUrl;
                        }
                    } catch (previewError) {
                        console.log('Preview URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', previewUrl, previewError.message);
                        continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL
                    }
                }
            }
            
            // –ú–µ—Ç–æ–¥ 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π download API –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const directDownloadUrl = `https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=${encodeURIComponent(publicUrl)}`;
            
            try {
                const directResponse = await axios.get(directDownloadUrl, { timeout: 5000 });
                if (directResponse.data && directResponse.data.href) {
                    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API');
                    return directResponse.data.href;
                }
            } catch (directError) {
                console.log('–ü—Ä—è–º–æ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', directError.message);
            }
            
            // –ú–µ—Ç–æ–¥ 4: Fallback –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–∫ fallback');
            return publicUrl;
            
        } catch (fallbackError) {
            console.error('–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:', fallbackError.message);
            return publicUrl;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
async function validateImageUrl(url) {
    try {
        const response = await axios.head(url, { 
            timeout: 5000,
            validateStatus: function (status) {
                return status >= 200 && status < 400; // –ü—Ä–∏–Ω–∏–º–∞–µ–º 2xx –∏ 3xx —Å—Ç–∞—Ç—É—Å—ã
            }
        });
        return response.status >= 200 && response.status < 400;
    } catch (error) {
        console.log('URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', url, error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function createSafeFileName(originalName, prefix = '') {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const ext = path.extname(originalName);
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏
    const nameWithoutExt = path.basename(originalName, ext);
    
    // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const safeName = transliterate(nameWithoutExt)
        .replace(/[^a-zA-Z0-9-_]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        .toLowerCase()
        .substring(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
    const timestamp = Date.now().toString().slice(-6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä –≤—Ä–µ–º–µ–Ω–∏
    const randomStr = Math.random().toString(36).substring(2, 5); // 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞
    
    return `${prefix}${safeName}-${timestamp}${randomStr}${ext}`;
}

// ------------ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π ------------

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
app.post('/api/db/articles', upload.fields([
    { name: 'mainImage', maxCount: 1 },
    { name: 'blockImage_0', maxCount: 1 },
    { name: 'blockImage_1', maxCount: 1 },
    { name: 'blockImage_2', maxCount: 1 },
    { name: 'blockImage_3', maxCount: 1 },
    { name: 'blockImage_4', maxCount: 1 },
    { name: 'blockImage_5', maxCount: 1 },
    { name: 'blockImage_6', maxCount: 1 },
    { name: 'blockImage_7', maxCount: 1 },
    { name: 'blockImage_8', maxCount: 1 },
    { name: 'blockImage_9', maxCount: 1 }
]), async (req, res) => {
    let connection;
    try {
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        connection = await db.pool.getConnection();
        await connection.beginTransaction();

        const {
            title,
            category,
            publicationDate,
            authorId,
            shortDescription,
            contentBlocks,
            status = 'draft'
        } = req.body;

        console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:', { title, category, contentBlocks: typeof contentBlocks });
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', req.files ? Object.keys(req.files) : '–Ω–µ—Ç');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!title || !category) {
            await connection.rollback();
            connection.release();
            return res.status(400).json({ 
                success: false, 
                error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let slug = transliterate(title);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
        const existingSlug = await connection.query(
            'SELECT id FROM articles WHERE slug = ?',
            [slug]
        );
        
        if (existingSlug[0].length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            const suffix = Math.random().toString(36).substring(2, 8);
            slug = `${slug}-${suffix}`;
        }

        let mainImageUrl = null;
        let directImageUrl = null;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        if (req.files && req.files.mainImage && req.files.mainImage[0]) {
            const mainImageFile = req.files.mainImage[0];
            try {
                console.log('–ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', mainImageFile.originalname);
                
                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                const articlesFolderPath = `${BASE_PATH}/articles`;
                try {
                    await axios.put(
                        `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(articlesFolderPath)}`,
                        null,
                        {
                            headers: {
                                'Authorization': `OAuth ${YANDEX_TOKEN}`
                            }
                        }
                    );
                } catch (err) {
                    // –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                }

                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
                const articleFolderPath = `${articlesFolderPath}/${slug}`;
                await axios.put(
                    `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(articleFolderPath)}`,
                    null,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );

                // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                const fileName = createSafeFileName(mainImageFile.originalname, 'main-');
                const filePath = `${articleFolderPath}/${fileName}`;
                
                console.log('–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', fileName);
                
                // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                const uploadUrlResponse = await axios.get(
                    `https://cloud-api.yandex.net/v1/disk/resources/upload?path=${encodeURIComponent(filePath)}&overwrite=true`,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                await axios.put(uploadUrlResponse.data.href, mainImageFile.buffer, {
                    headers: {
                        'Content-Type': mainImageFile.mimetype
                    }
                });

                // –ü—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª
                await axios.put(
                    `https://cloud-api.yandex.net/v1/disk/resources/publish?path=${encodeURIComponent(filePath)}`,
                    null,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );

                // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
                const fileInfoResponse = await axios.get(
                    `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(filePath)}`,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );

                mainImageUrl = fileInfoResponse.data.public_url;
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                try {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ preview —Å—Å—ã–ª–∫–∏
                    directImageUrl = getDirectImageUrl(mainImageUrl);
                    console.log('–ü–æ—Å–ª–µ getDirectImageUrl directImageUrl:', directImageUrl);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    const isUrlValid = await validateImageUrl(directImageUrl);
                    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ preview —Å—Å—ã–ª–∫–∏ isUrlValid:', isUrlValid);
                    
                    if (!isUrlValid) {
                        console.log('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: preview —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º API –∑–∞–≥—Ä—É–∑–∫–∏');
                        
                        // –ü—Ä–æ–±—É–µ–º API –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ fallback
                        const downloadUrl = await getActualDownloadUrl(mainImageUrl);
                        console.log('–ó–∞–≥—Ä—É–∑–æ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:', downloadUrl);
                        
                        const isDownloadValid = await validateImageUrl(downloadUrl);
                        console.log('–ó–∞–≥—Ä—É–∑–æ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞:', isDownloadValid);
                        
                        if (isDownloadValid) {
                            directImageUrl = downloadUrl;
                            console.log('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É');
                            console.log('directImageUrl –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π:', directImageUrl);
                        } else {
                            console.log('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç');
                            directImageUrl = mainImageUrl;
                            console.log('directImageUrl –ø–æ—Å–ª–µ fallback –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é:', directImageUrl);
                        }
                    } else {
                        console.log('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: preview —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                        console.log('directImageUrl –æ—Å—Ç–∞–µ—Ç—Å—è preview:', directImageUrl);
                    }
                } catch (directUrlError) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é:', directUrlError.message);
                    directImageUrl = mainImageUrl;
                    console.log('directImageUrl –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', directImageUrl);
                }
                
                console.log('–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:', mainImageUrl);
                console.log('–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:', directImageUrl);
                
            } catch (uploadError) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', uploadError);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            }
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å—é –≤ –ë–î
        console.log('=== –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î ===');
        console.log('–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ main_image_url:', directImageUrl);
        console.log('–î–ª–∏–Ω–∞ URL:', directImageUrl ? directImageUrl.length : 'null');
        
        const [articleResult] = await connection.query(
            `INSERT INTO articles (title, slug, category, short_description, main_image_url, status, publication_date) 
             VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [title, slug, category, shortDescription, directImageUrl, status, publicationDate || new Date()]
        );

        const articleId = articleResult.insertId;
        console.log('–°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', articleId);

        // –°–≤—è–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é —Å –∞–≤—Ç–æ—Ä–æ–º
        if (authorId) {
            await connection.query(
                'INSERT INTO article_architects (article_id, architect_id, is_main_author) VALUES (?, ?, ?)',
                [articleId, authorId, 1]
            );
            console.log('–ê–≤—Ç–æ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—Ç–∞—Ç—å–µ');
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (contentBlocks) {
            let parsedBlocks;
            try {
                parsedBlocks = typeof contentBlocks === 'string' 
                    ? JSON.parse(contentBlocks) 
                    : contentBlocks;
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', e);
                parsedBlocks = [];
            }

            if (Array.isArray(parsedBlocks) && parsedBlocks.length > 0) {
                console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', parsedBlocks.length);
                
                for (let i = 0; i < parsedBlocks.length; i++) {
                    const block = parsedBlocks[i];
                    console.log(`–ë–ª–æ–∫ ${i}:`, block.type);
                    
                    if (block.type === 'text' && block.content) {
                        await connection.query(
                            `INSERT INTO content_blocks (entity_type, entity_id, block_type, content, sort_order) 
                             VALUES ('article', ?, 'text', ?, ?)`,
                            [articleId, block.content, block.order || i]
                        );
                        console.log(`–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ ${i} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
                        
                    } else if (block.type === 'image') {
                        let imageDirectUrl = null;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
                        const imageFieldName = `blockImage_${block.imageIndex}`;
                        if (block.imageIndex >= 0 && req.files && req.files[imageFieldName] && req.files[imageFieldName][0]) {
                            const imageFile = req.files[imageFieldName][0];
                            
                            try {
                                console.log(`–ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ ${i}:`, imageFile.originalname);
                                
                                const articleFolderPath = `${BASE_PATH}/articles/${slug}`;
                                
                                // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–ª–æ–∫–∞
                                const fileName = createSafeFileName(imageFile.originalname, `block${i}-`);
                                const filePath = `${articleFolderPath}/${fileName}`;
                                
                                console.log('–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∞:', fileName);
                                
                                // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                                const uploadUrlResponse = await axios.get(
                                    `https://cloud-api.yandex.net/v1/disk/resources/upload?path=${encodeURIComponent(filePath)}&overwrite=true`,
                                    {
                                        headers: {
                                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                                        }
                                    }
                                );

                                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                                await axios.put(uploadUrlResponse.data.href, imageFile.buffer, {
                                    headers: {
                                        'Content-Type': imageFile.mimetype
                                    }
                                });

                                // –ü—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª
                                await axios.put(
                                    `https://cloud-api.yandex.net/v1/disk/resources/publish?path=${encodeURIComponent(filePath)}`,
                                    null,
                                    {
                                        headers: {
                                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                                        }
                                    }
                                );

                                // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
                                const fileInfoResponse = await axios.get(
                                    `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(filePath)}`,
                                    {
                                        headers: {
                                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                                        }
                                    }
                                );

                                const publicUrl = fileInfoResponse.data.public_url;
                                
                                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                                try {
                                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ preview —Å—Å—ã–ª–∫–∏
                                    imageDirectUrl = getDirectImageUrl(publicUrl);
                                    console.log(`–ü–æ—Å–ª–µ getDirectImageUrl –¥–ª—è –±–ª–æ–∫–∞ ${i}:`, imageDirectUrl);
                                    
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
                                    const isUrlValid = await validateImageUrl(imageDirectUrl);
                                    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ preview —Å—Å—ã–ª–∫–∏ –±–ª–æ–∫–∞ ${i}:`, isUrlValid);
                                    
                                    if (!isUrlValid) {
                                        console.log(`–ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${i}: preview —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º API –∑–∞–≥—Ä—É–∑–∫–∏`);
                                        
                                        const downloadUrl = await getActualDownloadUrl(publicUrl);
                                        console.log(`–ó–∞–≥—Ä—É–∑–æ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±–ª–æ–∫–∞ ${i}:`, downloadUrl);
                                        
                                        const isDownloadValid = await validateImageUrl(downloadUrl);
                                        console.log(`–ó–∞–≥—Ä—É–∑–æ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±–ª–æ–∫–∞ ${i} –≤–∞–ª–∏–¥–Ω–∞:`, isDownloadValid);
                                        
                                        if (isDownloadValid) {
                                            imageDirectUrl = downloadUrl;
                                            console.log(`–ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${i}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É`);
                                        } else {
                                            console.log(`–ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${i}: –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é`);
                                            imageDirectUrl = publicUrl;
                                        }
                                    } else {
                                        console.log(`–ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${i}: preview —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
                                    }
                                } catch (directUrlError) {
                                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ ${i}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é:`, directUrlError.message);
                                    imageDirectUrl = publicUrl;
                                }
                                
                                console.log(`–ë–ª–æ–∫ ${i} - –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:`, publicUrl);
                                console.log(`–ë–ª–æ–∫ ${i} - –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:`, imageDirectUrl);
                                
                            } catch (imageUploadError) {
                                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∞ ${i}:`, imageUploadError);
                            }
                        }
                        
                        console.log(`=== –°–û–•–†–ê–ù–ï–ù–ò–ï –ë–õ–û–ö–ê ${i} –í –ë–î ===`);
                        console.log(`–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ image_url –¥–ª—è –±–ª–æ–∫–∞ ${i}:`, imageDirectUrl);
                        console.log(`–î–ª–∏–Ω–∞ URL –±–ª–æ–∫–∞ ${i}:`, imageDirectUrl ? imageDirectUrl.length : 'null');
                        
                        await connection.query(
                            `INSERT INTO content_blocks (entity_type, entity_id, block_type, content, image_url, caption, sort_order) 
                             VALUES ('article', ?, 'image', ?, ?, ?, ?)`,
                            [articleId, block.caption || '', imageDirectUrl, block.caption || '', block.order || i]
                        );
                        console.log(`–ë–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
                    }
                }
            } else {
                console.log('–ë–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞');
            }
        }

        // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await connection.commit();
        connection.release();

        res.json({ 
            success: true, 
            articleId,
            slug,
            mainImageUrl: directImageUrl,
            message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞' 
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
        if (connection) {
            await connection.rollback();
            connection.release();
        }
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
app.post('/api/db/articles/:articleId/content-images', upload.array('images', 20), async (req, res) => {
    try {
        const articleId = req.params.articleId;
        const { blockIndices } = req.body;
        
        if (!req.files || req.files.length === 0) {
            return res.status(400).json({ 
                success: false, 
                error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã' 
            });
        }

        const uploadedImages = [];

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
        const article = await db.getOne('SELECT slug FROM articles WHERE id = ?', [articleId]);
        if (!article) {
            return res.status(404).json({ 
                success: false, 
                error: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        const articleFolderPath = `${BASE_PATH}/articles/${article.slug}`;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for (let i = 0; i < req.files.length; i++) {
            const file = req.files[i];
            const blockIndex = blockIndices ? blockIndices[i] : i;
            
            try {
                console.log(`–ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ ${blockIndex}:`, file.originalname);
                
                // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–ª–æ–∫–∞
                const fileName = createSafeFileName(file.originalname, `block${blockIndex}-`);
                const filePath = `${articleFolderPath}/${fileName}`;
                
                console.log('–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∞:', fileName);
                
                // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                const uploadUrlResponse = await axios.get(
                    `https://cloud-api.yandex.net/v1/disk/resources/upload?path=${encodeURIComponent(filePath)}&overwrite=true`,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                await axios.put(uploadUrlResponse.data.href, file.buffer, {
                    headers: {
                        'Content-Type': file.mimetype
                    }
                });

                // –ü—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª
                await axios.put(
                    `https://cloud-api.yandex.net/v1/disk/resources/publish?path=${encodeURIComponent(filePath)}`,
                    null,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );

                // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
                const fileInfoResponse = await axios.get(
                    `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(filePath)}`,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );

                const publicUrl = fileInfoResponse.data.public_url;
                const directUrl = getDirectImageUrl(publicUrl);
                
                console.log(`–ë–ª–æ–∫ ${blockIndex} - –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:`, publicUrl);
                console.log(`–ë–ª–æ–∫ ${blockIndex} - –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:`, directUrl);

                uploadedImages.push({
                    blockIndex,
                    url: directUrl, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                    publicUrl: publicUrl, // –ò –ø—É–±–ª–∏—á–Ω—É—é —Ç–æ–∂–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                    fileName: file.originalname
                });

            } catch (uploadError) {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i}:`, uploadError);
                uploadedImages.push({
                    blockIndex,
                    error: uploadError.message
                });
            }
        }

        res.json({ 
            success: true, 
            images: uploadedImages 
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–ª–æ–∫–æ–≤:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
app.delete('/api/db/articles/:id', async (req, res) => {
    let connection;
    try {
        const articleId = req.params.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
        const article = await db.getOne('SELECT * FROM articles WHERE id = ?', [articleId]);
        if (!article) {
            return res.status(404).json({ 
                success: false, 
                error: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        connection = await db.pool.getConnection();
        await connection.beginTransaction();
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
        await connection.query(
            'DELETE FROM article_architects WHERE article_id = ?',
            [articleId]
        );
        
        // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await connection.query(
            'DELETE FROM content_blocks WHERE entity_type = "article" AND entity_id = ?',
            [articleId]
        );
        
        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        await connection.query(
            'DELETE FROM images WHERE entity_type = "article" AND entity_id = ?',
            [articleId]
        );
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Å—Ç–∞—Ç—å—é
        await connection.query(
            'DELETE FROM articles WHERE id = ?',
            [articleId]
        );
        
        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É —Å—Ç–∞—Ç—å–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        if (article.slug) {
            try {
                const articleFolderPath = `${BASE_PATH}/articles/${article.slug}`;
                await axios.delete(
                    `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(articleFolderPath)}&permanently=true`,
                    {
                        headers: {
                            'Authorization': `OAuth ${YANDEX_TOKEN}`
                        }
                    }
                );
            } catch (diskError) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:', diskError.message);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
            }
        }
        
        // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await connection.commit();
        connection.release();
        
        res.json({ 
            success: true, 
            message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
        if (connection) {
            await connection.rollback();
            connection.release();
        }
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// ------------ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–æ–º ------------

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
app.get('/api/folders', async (req, res) => {
    try {
        const response = await axios.get(`https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(BASE_PATH)}`, {
            headers: {
                'Authorization': `OAuth ${YANDEX_TOKEN}`
            }
        });

        const folders = response.data._embedded.items
            .filter(item => item.type === 'dir')
            .map(folder => ({
                name: folder.name,
                path: folder.path,
                created: folder.created
            }));

        res.json({ success: true, folders });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫:', error.response?.data || error.message);
        res.status(500).json({ 
            success: false, 
            error: error.response?.data?.message || error.message 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
app.post('/api/folders', async (req, res) => {
    const { folderName } = req.body;
    if (!folderName) {
        return res.status(400).json({ success: false, error: '–ò–º—è –ø–∞–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    try {
        const folderPath = `${BASE_PATH}/${folderName}`;
        await axios.put(`https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(folderPath)}`, null, {
            headers: {
                'Authorization': `OAuth ${YANDEX_TOKEN}`
            }
        });

        res.json({ success: true, folderPath });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:', error.response?.data || error.message);
        res.status(500).json({ 
            success: false, 
            error: error.response?.data?.message || error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
app.get('/api/upload-url', async (req, res) => {
    const { folderPath, fileName } = req.query;
    if (!folderPath || !fileName) {
        return res.status(400).json({ success: false, error: '–ü—É—Ç—å –ø–∞–ø–∫–∏ –∏ –∏–º—è —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const filePath = `${folderPath}/${fileName}`;
        const response = await axios.get(`https://cloud-api.yandex.net/v1/disk/resources/upload?path=${encodeURIComponent(filePath)}&overwrite=true`, {
            headers: {
                'Authorization': `OAuth ${YANDEX_TOKEN}`
            }
        });

        res.json({ success: true, uploadUrl: response.data.href });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', error.response?.data || error.message);
        res.status(500).json({ 
            success: false, 
            error: error.response?.data?.message || error.message 
        });
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –≤ –ë–î –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
app.post('/api/upload', upload.single('file'), async (req, res) => {
    if (!req.file) {
        return res.status(400).json({ success: false, error: '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω' });
    }

    const { folderPath, entityType, entityId } = req.body;
    if (!folderPath) {
        return res.status(400).json({ success: false, error: '–ü—É—Ç—å –ø–∞–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    try {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const fileName = req.file.originalname;
        const filePath = `${folderPath}/${fileName}`;
        
        const uploadUrlResponse = await axios.get(
            `https://cloud-api.yandex.net/v1/disk/resources/upload?path=${encodeURIComponent(filePath)}&overwrite=true`,
            {
                headers: {
                    'Authorization': `OAuth ${YANDEX_TOKEN}`
                }
            }
        );

        const uploadUrl = uploadUrlResponse.data.href;

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        const fileData = fs.readFileSync(req.file.path);
        
        await axios.put(uploadUrl, fileData, {
            headers: {
                'Content-Type': 'application/octet-stream'
            }
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        fs.unlinkSync(req.file.path);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
        let publicUrl = null;
        try {
            await axios.put(
                `https://cloud-api.yandex.net/v1/disk/resources/publish?path=${encodeURIComponent(filePath)}`,
                null,
                {
                    headers: {
                        'Authorization': `OAuth ${YANDEX_TOKEN}`
                    }
                }
            );

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
            const fileInfoResponse = await axios.get(
                `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(filePath)}`,
                {
                    headers: {
                        'Authorization': `OAuth ${YANDEX_TOKEN}`
                    }
                }
            );

            publicUrl = fileInfoResponse.data.public_url;
            
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∏ ID —Å—É—â–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î
            if (entityType && entityId && publicUrl) {
                const imageData = {
                    url: publicUrl,
                    alt_text: fileName,
                    title: fileName,
                    entity_type: entityType,
                    entity_id: entityId,
                    sort_order: 0
                };
                
                const imageId = await db.insert('images', imageData);
                console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î —Å ID: ${imageId}`);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', error.response?.data || error.message);
        }

        res.json({ success: true, filePath, publicUrl });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error.response?.data || error.message);
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (req.file && fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path);
        }
        res.status(500).json({ 
            success: false, 
            error: error.response?.data?.message || error.message 
        });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
app.post('/api/db/projects', upload.any(), async (req, res) => {
    console.log('\n=== –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===');
    console.log('–í—Ä–µ–º—è:', new Date().toISOString());
    console.log('req.body:', req.body);
    console.log('req.files:', req.files ? req.files.map(f => ({ fieldname: f.fieldname, originalname: f.originalname, size: f.size })) : '–Ω–µ—Ç —Ñ–∞–π–ª–æ–≤');
    
    try {
        const { title, type, description, area, location, year, status, contentBlocks } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!title) {
            return res.status(400).json({
                success: false,
                error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
            });
        }
        
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:', { title, type, area, location, year, status });
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', req.files ? req.files.length : 0);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let slug = transliterate(title);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
        const existingSlug = await db.getOne('SELECT id FROM projects WHERE slug = ?', [slug]);
        if (existingSlug) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            const suffix = Math.random().toString(36).substring(2, 8);
            slug = `${slug}-${suffix}`;
        }
        
        console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π slug:', slug);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î
        const projectData = {
            title: title,
            slug: slug,
            description: description || null, // –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º—ã
            project_type: type || null, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ project_type –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
            location: location || null,
            year_completed: year || null, // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ –ë–î
            area: area ? parseFloat(area) : null,
            status: status === 'published' ? 'published' : 'draft',
            path_to_file: null // –ü–æ–∫–∞ null, –æ–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏
        };
        
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î:', projectData);
        
        const projectId = await db.insert('projects', projectData);
        
        console.log('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID:', projectId);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        const safeTitleForFolder = transliterate(title).replace(/[^a-zA-Z0-9]/g, '_').substring(0, 30);
        const projectFolderName = `project_${projectId}_${safeTitleForFolder}`;
        const projectFolderPath = path.join(__dirname, 'pic2', 'projects', projectFolderName);
        
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', projectFolderPath);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const projectsDir = path.join(__dirname, 'pic2', 'projects');
        if (!fs.existsSync(projectsDir)) {
            console.log('–°–æ–∑–¥–∞—é –ø–∞–ø–∫—É projects:', projectsDir);
            fs.mkdirSync(projectsDir, { recursive: true });
        }
        
        if (!fs.existsSync(projectFolderPath)) {
            console.log('–°–æ–∑–¥–∞—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞:', projectFolderPath);
            fs.mkdirSync(projectFolderPath, { recursive: true });
            console.log('–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.log('–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        let coverImagePath = null;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        const coverImage = req.files?.find(file => file.fieldname === 'coverImage');
        console.log('–û–±–ª–æ–∂–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö:', !!coverImage);
        
        if (coverImage) {
            console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–±–ª–æ–∂–∫—É:', coverImage.originalname);
            const coverFileName = createSafeFileName(coverImage.originalname, 'cover_');
            const coverFilePath = path.join(projectFolderPath, coverFileName);
            
            fs.writeFileSync(coverFilePath, coverImage.buffer);
            coverImagePath = `/pic2/projects/${projectFolderName}/${coverFileName}`;
            
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞:', coverImagePath);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ path_to_file)
            await db.update('projects', { path_to_file: coverImagePath }, 'id = ?', [projectId]);
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –≤ –ë–î');
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –ë–î
        if (contentBlocks) {
            let blocks;
            try {
                blocks = JSON.parse(contentBlocks);
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', blocks.length);
            } catch (e) {
                console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', e.message);
                blocks = [];
            }
            
            for (const block of blocks) {
                let imagePath = null;
                let imagePath2 = null;
                
                console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–ª–æ–∫ ${block.order}: ${block.type}`);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ
                if (block.type === 'image' && block.imageIndex !== undefined) {
                    const imageFile = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndex}`);
                    if (imageFile) {
                        const fileName = createSafeFileName(imageFile.originalname, `block_${block.order}_`);
                        const filePath = path.join(projectFolderPath, fileName);
                        
                        fs.writeFileSync(filePath, imageFile.buffer);
                        imagePath = `/pic2/projects/${projectFolderName}/${fileName}`;
                        
                        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞:', imagePath);
                    }
                } else if (block.type === 'two_images') {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if (block.imageIndexLeft !== undefined) {
                        const imageFileLeft = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndexLeft}`);
                        if (imageFileLeft) {
                            const fileName = createSafeFileName(imageFileLeft.originalname, `block_${block.order}_left_`);
                            const filePath = path.join(projectFolderPath, fileName);
                            
                            fs.writeFileSync(filePath, imageFileLeft.buffer);
                            imagePath = `/pic2/projects/${projectFolderName}/${fileName}`;
                            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞:', imagePath);
                        }
                    }
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if (block.imageIndexRight !== undefined) {
                        const imageFileRight = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndexRight}`);
                        if (imageFileRight) {
                            const fileName = createSafeFileName(imageFileRight.originalname, `block_${block.order}_right_`);
                            const filePath = path.join(projectFolderPath, fileName);
                            
                            fs.writeFileSync(filePath, imageFileRight.buffer);
                            imagePath2 = `/pic2/projects/${projectFolderName}/${fileName}`;
                            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞:', imagePath2);
                        }
                    }
                } else if (block.type === 'image_text' || block.type === 'text_image') {
                    if (block.imageIndex !== undefined) {
                        const imageFile = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndex}`);
                        if (imageFile) {
                            const fileName = createSafeFileName(imageFile.originalname, `block_${block.order}_`);
                            const filePath = path.join(projectFolderPath, fileName);
                            
                            fs.writeFileSync(filePath, imageFile.buffer);
                            imagePath = `/pic2/projects/${projectFolderName}/${fileName}`;
                            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞:', imagePath);
                        }
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É project_content_blocks)
                try {
                    const blockData = {
                        project_id: projectId,
                        block_type: block.type,
                        content: block.content || null,
                        image_path: imagePath,
                        image_path_2: imagePath2,
                        image_alt: block.captionLeft || block.caption || null,
                        image_alt_2: block.captionRight || null,
                        caption: block.captionLeft || block.caption || null,
                        sort_order: block.order || 0
                    };
                    
                    const blockId = await db.insert('project_content_blocks', blockData);
                    console.log(`–ë–ª–æ–∫ ${block.type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: ${blockId}`);
                } catch (blockError) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ ${block.order}:`, blockError.message);
                }
            }
        }
        
        res.json({
            success: true,
            message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            projectId: projectId,
            folderPath: projectFolderName
        });
        
    } catch (error) {
        console.error('\n=== –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===');
        console.error('–í—Ä–µ–º—è:', new Date().toISOString());
        console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
        console.error('=== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ===\n');
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
        if (!res.headersSent) {
            res.status(500).json({
                success: false,
                error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
app.get('/api/db/projects/:id', async (req, res) => {
    try {
        const projectId = parseInt(req.params.id);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø—Ä–æ–µ–∫—Ç–∞
        if (!projectId || isNaN(projectId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        const project = await db.getOne('SELECT * FROM projects WHERE id = ?', [projectId]);
        if (!project) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
        const contentBlocks = await db.getAll(
            'SELECT * FROM project_content_blocks WHERE project_id = ? ORDER BY sort_order ASC',
            [projectId]
        );
        
        res.json({
            success: true,
            project: {
                ...project,
                contentBlocks: contentBlocks
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message
        });
    }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
app.put('/api/db/projects/:id', upload.any(), async (req, res) => {
    console.log('\n=== –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===');
    console.log('–í—Ä–µ–º—è:', new Date().toISOString());
    console.log('Project ID:', req.params.id);
    console.log('req.body:', req.body);
    console.log('req.files:', req.files ? req.files.map(f => ({ fieldname: f.fieldname, originalname: f.originalname, size: f.size })) : '–Ω–µ—Ç —Ñ–∞–π–ª–æ–≤');
    
    try {
        const projectId = parseInt(req.params.id);
        const { title, type, description, area, location, year, status, contentBlocks } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø—Ä–æ–µ–∫—Ç–∞
        if (!projectId || isNaN(projectId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
        const existingProject = await db.getOne('SELECT * FROM projects WHERE id = ?', [projectId]);
        if (!existingProject) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!title) {
            return res.status(400).json({
                success: false,
                error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
            });
        }
        
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:', { title, type, area, location, year, status });
        console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç:', existingProject.title);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        let slug = existingProject.slug;
        if (title !== existingProject.title) {
            slug = transliterate(title);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç)
            const existingSlug = await db.getOne('SELECT id FROM projects WHERE slug = ? AND id != ?', [slug, projectId]);
            if (existingSlug) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                const suffix = Math.random().toString(36).substring(2, 8);
                slug = `${slug}-${suffix}`;
            }
        }
        
        console.log('Slug –ø—Ä–æ–µ–∫—Ç–∞:', slug);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        const safeTitleForFolder = transliterate(existingProject.title).replace(/[^a-zA-Z0-9]/g, '_').substring(0, 30);
        const projectFolderName = `project_${projectId}_${safeTitleForFolder}`;
        const projectFolderPath = path.join(__dirname, 'pic2', 'projects', projectFolderName);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(projectFolderPath)) {
            console.log('–°–æ–∑–¥–∞—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞:', projectFolderPath);
            fs.mkdirSync(projectFolderPath, { recursive: true });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        const projectData = {
            title: title,
            slug: slug,
            description: description || null,
            project_type: type || null,
            location: location || null,
            year_completed: year || null,
            area: area ? parseFloat(area) : null,
            status: status === 'published' ? 'published' : 'draft'
        };
        
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î:', projectData);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è
        const coverImage = req.files?.find(file => file.fieldname === 'coverImage');
        if (coverImage) {
            console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É:', coverImage.originalname);
            const coverFileName = createSafeFileName(coverImage.originalname, 'cover_');
            const coverFilePath = path.join(projectFolderPath, coverFileName);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –æ–±–ª–æ–∂–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if (existingProject.path_to_file) {
                const oldCoverPath = path.join(__dirname, existingProject.path_to_file.replace(/^\//, ''));
                if (fs.existsSync(oldCoverPath)) {
                    console.log('–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é –æ–±–ª–æ–∂–∫—É:', oldCoverPath);
                    fs.unlinkSync(oldCoverPath);
                }
            }
            
            fs.writeFileSync(coverFilePath, coverImage.buffer);
            projectData.path_to_file = `/pic2/projects/${projectFolderName}/${coverFileName}`;
            
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –æ–±–ª–æ–∂–∫–∞:', projectData.path_to_file);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.update('projects', projectData, 'id = ?', [projectId]);
        console.log('–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (contentBlocks) {
            let blocks;
            try {
                blocks = JSON.parse(contentBlocks);
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', blocks.length);
            } catch (e) {
                console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', e.message);
                blocks = [];
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
            const existingBlocks = await db.query(
                'SELECT * FROM project_content_blocks WHERE project_id = ? ORDER BY sort_order',
                [projectId]
            );
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ ID –±–ª–æ–∫–∞
            const existingImages = {};
            existingBlocks.forEach(block => {
                existingImages[block.id] = {
                    image_path: block.image_path,
                    image_path_2: block.image_path_2,
                    image_alt: block.image_alt,
                    image_alt_2: block.image_alt_2,
                    caption: block.caption
                };
            });
            
            console.log('–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤:', existingBlocks.length);
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
            console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
            await db.query('DELETE FROM project_content_blocks WHERE project_id = ?', [projectId]);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for (const block of blocks) {
                let imagePath = null;
                let imagePath2 = null;
                
                console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–ª–æ–∫ ${block.order}: ${block.type}`);
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ ID (–µ—Å–ª–∏ –±–ª–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
                const existingImageData = block.existingBlockId ? existingImages[block.existingBlockId] : null;
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ
                if (block.type === 'image') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if (block.imageIndex !== undefined) {
                        const imageFile = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndex}`);
                        if (imageFile) {
                            const fileName = createSafeFileName(imageFile.originalname, `block_${block.order}_`);
                            const filePath = path.join(projectFolderPath, fileName);
                            
                            fs.writeFileSync(filePath, imageFile.buffer);
                            imagePath = `/pic2/projects/${projectFolderName}/${fileName}`;
                            
                            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞:', imagePath);
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
                    if (!imagePath && block.existingImagePath) {
                        imagePath = block.existingImagePath;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞:', imagePath);
                    }
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    if (!imagePath && existingImageData && existingImageData.image_path) {
                        imagePath = existingImageData.image_path;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ë–î:', imagePath);
                    }
                    
                } else if (block.type === 'two_images') {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if (block.imageIndexLeft !== undefined) {
                        const imageFileLeft = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndexLeft}`);
                        if (imageFileLeft) {
                            const fileName = createSafeFileName(imageFileLeft.originalname, `block_${block.order}_left_`);
                            const filePath = path.join(projectFolderPath, fileName);
                            
                            fs.writeFileSync(filePath, imageFileLeft.buffer);
                            imagePath = `/pic2/projects/${projectFolderName}/${fileName}`;
                            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ –ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞:', imagePath);
                        }
                    }
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if (block.imageIndexRight !== undefined) {
                        const imageFileRight = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndexRight}`);
                        if (imageFileRight) {
                            const fileName = createSafeFileName(imageFileRight.originalname, `block_${block.order}_right_`);
                            const filePath = path.join(projectFolderPath, fileName);
                            
                            fs.writeFileSync(filePath, imageFileRight.buffer);
                            imagePath2 = `/pic2/projects/${projectFolderName}/${fileName}`;
                            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞:', imagePath2);
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
                    if (!imagePath && block.existingImagePathLeft) {
                        imagePath = block.existingImagePathLeft;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞:', imagePath);
                    }
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    if (!imagePath && existingImageData && existingImageData.image_path) {
                        imagePath = existingImageData.image_path;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ë–î:', imagePath);
                    }
                    
                    if (!imagePath2 && block.existingImagePathRight) {
                        imagePath2 = block.existingImagePathRight;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞:', imagePath2);
                    }
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    if (!imagePath2 && existingImageData && existingImageData.image_path_2) {
                        imagePath2 = existingImageData.image_path_2;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ë–î:', imagePath2);
                    }
                    
                } else if (block.type === 'image_text' || block.type === 'text_image') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if (block.imageIndex !== undefined) {
                        const imageFile = req.files?.find(file => file.fieldname === `blockImage_${block.imageIndex}`);
                        if (imageFile) {
                            const fileName = createSafeFileName(imageFile.originalname, `block_${block.order}_`);
                            const filePath = path.join(projectFolderPath, fileName);
                            
                            fs.writeFileSync(filePath, imageFile.buffer);
                            imagePath = `/pic2/projects/${projectFolderName}/${fileName}`;
                            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞:', imagePath);
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
                    if (!imagePath && block.existingImagePath) {
                        imagePath = block.existingImagePath;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞:', imagePath);
                    }
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    if (!imagePath && existingImageData && existingImageData.image_path) {
                        imagePath = existingImageData.image_path;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –ë–î:', imagePath);
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ë–î
                try {
                    const blockData = {
                        project_id: projectId,
                        block_type: block.type,
                        content: block.content || null,
                        image_path: imagePath,
                        image_path_2: imagePath2,
                        image_alt: block.captionLeft || block.caption || null,
                        image_alt_2: block.captionRight || null,
                        caption: block.captionLeft || block.caption || null,
                        sort_order: block.order || 0
                    };
                    
                    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∞ ${block.order} (${block.type}) –≤ –ë–î:`);
                    console.log('   - image_path:', imagePath);
                    console.log('   - image_path_2:', imagePath2);
                    console.log('   - caption:', block.captionLeft || block.caption || null);
                    
                    const blockId = await db.insert('project_content_blocks', blockData);
                    console.log(` –ë–ª–æ–∫ ${block.type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: ${blockId}`);
                } catch (blockError) {
                    console.error(` –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ ${block.order}:`, blockError.message);
                }
            }
        }
        
        res.json({
            success: true,
            message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            projectId: projectId
        });
        
    } catch (error) {
        console.error('\n=== –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===');
        console.error('–í—Ä–µ–º—è:', new Date().toISOString());
        console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
        
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message
        });
    }
});

// API endpoint –¥–ª—è Interior Design —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Replicate adirik/interior-design
app.post('/api/interior-design-replicate', upload.single('image'), async (req, res) => {
    console.log('\n === INTERIOR DESIGN REPLICATE (adirik/interior-design) ===');
    console.log('–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:', new Date().toISOString());
    console.log('IP –∫–ª–∏–µ–Ω—Ç–∞:', req.ip || req.connection.remoteAddress);
    
    try {
        console.log(' –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        console.log('req.body:', req.body);
        console.log('req.file:', req.file ? {
            fieldname: req.file.fieldname,
            originalname: req.file.originalname,
            mimetype: req.file.mimetype,
            size: req.file.size
        } : '–ù–ï–¢ –§–ê–ô–õ–ê');
        
        if (!req.file) {
            console.log(' –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return res.status(400).json({ 
                success: false, 
                error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' 
            });
        }

        const { style, prompt, negative_prompt } = req.body;
        
        if (!style || !prompt) {
            console.log(' –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { style, prompt });
            return res.status(400).json({ 
                success: false, 
                error: '–°—Ç–∏–ª—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        console.log(' –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        console.log(' –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { 
            style, 
            prompt, 
            negative_prompt,
            fileSize: req.file.size,
            fileName: req.file.originalname,
            mimeType: req.file.mimetype
        });

        // –§—É–Ω–∫—Ü–∏—è –Ω–µ–π—Ä–æ–ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ Replicate ALMA-7B
        async function translateRussianToEnglishAI(text) {
            if (!text || text.trim() === '') return '';
            
            try {
                console.log('ü§ñ –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è:', text);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
                const hasRussian = /[–∞-—è—ë]/i.test(text);
                if (!hasRussian) {
                    console.log('üåê –¢–µ–∫—Å—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥');
                    return text;
                }
                
                const translationOutput = await replicate.run(
                    "meta/meta-llama-3-8b-instruct",
                    {
                        input: {
                            prompt: `Translate the following Russian text to English. Only provide the English translation, nothing else:\n\n${text}`,
                            max_tokens: 100,
                            temperature: 0.1,
                            top_p: 0.9
                        }
                    }
                );
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫)
                let translatedText = '';
                if (Array.isArray(translationOutput)) {
                    translatedText = translationOutput.join('').trim();
                } else {
                    translatedText = String(translationOutput).trim();
                }
                
                // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
                translatedText = translatedText
                    .replace(/^.*English:\s*/i, '') // —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                    .replace(/Russian:.*$/i, '') // —É–±–∏—Ä–∞–µ–º –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏–ª—Å—è –∏—Å—Ö–æ–¥–Ω–∏–∫
                    .replace(/\n.*$/s, '') // –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                    .trim();
                
                console.log('üåê –ù–µ–π—Ä–æ–ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω:', translatedText);
                return translatedText || text; // –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                
            } catch (error) {
                console.error(' –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–ø–µ—Ä–µ–≤–æ–¥–∞:', error.message);
                console.log(' –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∫–∞–∫ fallback');
                
                // Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É
                return translateBasicRussianToEnglish(text);
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–∞–∫ fallback
        function translateBasicRussianToEnglish(text) {
            if (!text) return '';
            
            const translations = {
                '—Å—Ç—É–ª': 'chair', '—Å—Ç–æ–ª': 'table', '–¥–∏–≤–∞–Ω': 'sofa', '–∫—Ä–æ–≤–∞—Ç—å': 'bed',
                '–∫—Ä–∞—Å–Ω—ã–π': 'red', '–∫—Ä–∞—Å–Ω–∞—è': 'red', '—Å–∏–Ω–∏–π': 'blue', '—Å–∏–Ω—è—è': 'blue',
                '–ø–æ–¥—Å–≤–µ—Ç–∫–∞': 'lighting', '—Å–≤–µ—Ç': 'light', '–æ—Å–≤–µ—â–µ–Ω–∏–µ': 'lighting',
                '–ø–æ —Ü–µ–Ω—Ç—Ä—É': 'in the center', '–∫–æ–º–Ω–∞—Ç–∞': 'room', '—Å—Ç–µ–Ω–∞': 'wall', '—Å—Ç–µ–Ω—ã': 'walls', '—Å—Ç–µ–Ω': 'walls'
            };
            
            let translatedText = text.toLowerCase();
            for (const [russian, english] of Object.entries(translations)) {
                const regex = new RegExp(russian, 'gi');
                translatedText = translatedText.replace(regex, english);
            }
            
            return translatedText;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Replicate SDK
        const Replicate = require('replicate');
        const replicate = new Replicate({
            auth: process.env.REPLICATE_API_TOKEN
        });

        // –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        console.log('üåê –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º—Ç:', prompt);
        const translatedPrompt = await translateRussianToEnglishAI(prompt);
        const translatedNegativePrompt = negative_prompt ? await translateRussianToEnglishAI(negative_prompt) : '';
        
        console.log('üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:', translatedPrompt);

        // –ö–∞—Ä—Ç–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–º—Ç
        const styleMap = {
            'minimalist': 'minimalist style, clean lines, neutral colors, simple furniture, uncluttered space',
            'scandinavian': 'scandinavian style, light wood, white walls, cozy textiles, natural materials, hygge atmosphere',
            'industrial': 'industrial style, raw materials, exposed pipes, concrete walls, metal accents, urban loft feeling',
            'loft': 'loft style, industrial design, exposed brick walls, metal fixtures, high ceilings, urban atmosphere',
            'modern': 'modern style, contemporary furniture, geometric shapes, bold colors, innovative design',
            'contemporary': 'contemporary style, current trends, sleek lines, neutral palette, functional design',
            'classic': 'classic style, elegant furniture, ornate details, rich fabrics, traditional design, timeless appeal',
            'neoclassic': 'neoclassic style, refined elegance, marble accents, classical proportions, luxury finishes',
            'provence': 'provence style, french country, pastel colors, floral patterns, vintage furniture, rustic charm',
            'art-deco': 'art deco style, geometric patterns, metallic accents, bold colors, glamorous details, 1920s elegance',
            'vintage': 'vintage style, retro furniture, aged patina, antique accessories, nostalgic atmosphere',
            'japanese': 'japanese style, minimalist design, natural materials, zen aesthetics, clean lines, harmony',
            'high-tech': 'high-tech style, futuristic design, metallic surfaces, advanced technology, sleek appearance',
            'rustic': 'rustic style, wooden furniture, natural textures, earthy colors, countryside feel, cozy atmosphere',
            'mediterranean': 'mediterranean style, warm colors, natural stone, terracotta tiles, coastal influence, relaxed atmosphere',
            'boho': 'bohemian style, vibrant colors, layered textiles, artistic elements, free-spirited decor, eclectic mix',
            'eclectic': 'eclectic style, mixed patterns, colorful decor, unique accessories, creative combinations',
            'tropical': 'tropical style, bright colors, natural materials, palm motifs, beach house feel, relaxed vibe',
            'coastal': 'coastal style, light blues, white accents, nautical elements, beachy atmosphere, relaxed mood',
            'mid-century': 'mid-century modern style, retro furniture, warm woods, clean lines, 1950s-60s aesthetic'
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è
        const styleDescription = styleMap[style] || style;
        const finalPrompt = `${styleDescription}, ${translatedPrompt}`;
        
        console.log('üé® –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç —Å —Å—Ç–∏–ª–µ–º:', finalPrompt);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ data URL
        const base64Image = req.file.buffer.toString('base64');
        const imageDataUrl = `data:${req.file.mimetype};base64,${base64Image}`;
        console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ data URL, —Ä–∞–∑–º–µ—Ä:', base64Image.length);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Replicate API
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Replicate API...');
        console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏:');
        console.log('   - –ü—Ä–æ–º—Ç:', finalPrompt);
        console.log('   - –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º—Ç:', translatedNegativePrompt || "low quality, blurry, distorted, cluttered, messy, poor lighting, old furniture, outdated design");
        console.log('   - Guidance Scale:', 12.0);
        console.log('   - Prompt Strength:', 1.0);
        console.log('   - Inference Steps:', 30);
        
        const output = await replicate.run(
            "adirik/interior-design:76604baddc85b1b4616e1c6475eca080da339c8875bd4996705440484a6eac38",
            {
                input: {
                    image: imageDataUrl,
                    prompt: finalPrompt,
                    negative_prompt: translatedNegativePrompt || "low quality, blurry, distorted, cluttered, messy, poor lighting, old furniture, outdated design",
                    num_inference_steps: 30,
                    guidance_scale: 12.0,
                    prompt_strength: 1.0,
                    seed: Math.floor(Math.random() * 1000000)
                }
            }
        );

        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        console.log('üñºÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç:', output);
        
        // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const outputImageUrl = output;
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        let editedImageBase64;
        try {
            const imageResponse = await axios.get(outputImageUrl, { responseType: 'arraybuffer' });
            editedImageBase64 = Buffer.from(imageResponse.data).toString('base64');
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64');
        } catch (downloadError) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º URL:', downloadError.message);
            editedImageBase64 = null;
        }
        
        res.json({
            success: true,
            message: '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å –ø–æ–º–æ—â—å—é adirik/interior-design',
            originalImage: `data:image/jpeg;base64,${base64Image}`,
            editedImage: editedImageBase64 ? `data:image/png;base64,${editedImageBase64}` : outputImageUrl,
            editedImageUrl: outputImageUrl,
            style: style,
            originalPrompt: prompt,
            translatedPrompt: translatedPrompt,
            finalPrompt: finalPrompt,
            negative_prompt: negative_prompt,
            translatedNegativePrompt: translatedNegativePrompt,
            model: 'adirik/interior-design',
            provider: 'Replicate SDK',
            processingTime: 'auto' // SDK –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        });

    } catch (error) {
        console.error('\n‚ùå === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê INTERIOR DESIGN ===');
        console.error('–í—Ä–µ–º—è:', new Date().toISOString());
        console.error('–û—à–∏–±–∫–∞:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
        
        res.status(500).json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
app.get('/admin/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin_login.html'));
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/admin', (req, res) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if (!req.session || !req.session.isAuthenticated) {
        return res.redirect('/admin/login');
    }
    res.sendFile(path.join(__dirname, 'admin.html'));
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"
app.get('/about', (req, res) => {
    res.sendFile(path.join(__dirname, 'about.html'));
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/test', (req, res) => {
    res.sendFile(path.join(__dirname, 'test.html'));
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π
app.get('/test_simple_article.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_simple_article.html'));
});

// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π —Å –±–ª–æ–∫–∞–º–∏
app.get('/test_advanced_article.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_advanced_article.html'));
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
app.get('/test_admin_create.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_admin_create.html'));
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
app.get('/test_project_creation.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_project_creation.html'));
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –±–ª–æ–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
app.get('/test_project_blocks.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_project_blocks.html'));
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è Interior Design
app.get('/test_interior_design.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_interior_design.html'));
});

// –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.get('/test_simple_upload.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_simple_upload.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
app.get('/test_image_blocks.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_image_blocks.html'));
});

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç–∞—Ç–µ–π
app.get('/test_images_debug.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_images_debug.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin`);
    console.log(`üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:${PORT}`);
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`);
    console.log(`   - http://localhost:${PORT}/test_simple_article.html`);
    console.log(`   - http://localhost:${PORT}/test_advanced_article.html`);
    console.log(`   - http://localhost:${PORT}/test_image_blocks.html`);
    console.log(`   - http://localhost:${PORT}/test_admin_create.html`);
    console.log(`   - http://localhost:${PORT}/test_project_creation.html`);
    console.log(`   - http://localhost:${PORT}/test_simple_upload.html`);
    console.log(`   - http://localhost:${PORT}/test_interior_design.html üè† –ù–û–í–û–ï!`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try {
        const isConnected = await db.testConnection();
        if (isConnected) {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        } else {
            console.error('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error.message);
    }
    
    console.log('\nüéØ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n');
});