const axios = require('axios');
const db = require('./db');

const YANDEX_TOKEN = 'y0__xCiw9GsARjA8zcg_drjmRPYVRdg8smUUH0pJWclVDOPZc2Erg';
const BASE_PATH = 'Architecture&design';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
async function getActualDownloadUrl(publicUrl) {
    try {
        console.log('–ü–æ–ª—É—á–∞—é –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è:', publicUrl.substring(0, 50) + '...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
        const downloadResponse = await axios.get(
            `https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=${encodeURIComponent(publicUrl)}`,
            {
                headers: {
                    'Authorization': `OAuth ${YANDEX_TOKEN}`
                },
                timeout: 15000
            }
        );
        
        if (downloadResponse.data && downloadResponse.data.href) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞');
            return downloadResponse.data.href;
        }
        
        throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É');
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏:', error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –≤ –ë–î
async function refreshExpiredUrls() {
    try {
        console.log('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–°–¢–ï–ö–®–ò–• URL-–°–°–´–õ–û–ö –Ø–ù–î–ï–ö–°.–î–ò–°–ö–ê');
        console.log('='.repeat(60));
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        const isConnected = await db.testConnection();
        if (!isConnected) {
            console.log('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        console.log('\nüì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...');
        const images = await db.query('SELECT * FROM images ORDER BY id');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${images.length}`);
        
        let updatedCount = 0;
        let errorCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for (let i = 0; i < images.length; i++) {
            const image = images[i];
            console.log(`\n${i + 1}/${images.length} - ID: ${image.id} - ${image.title || image.alt_text}`);
            
            if (!image.url) {
                console.log('   ‚ö†Ô∏è URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
            try {
                const currentCheck = await axios.head(image.url, { 
                    timeout: 8000,
                    validateStatus: function (status) {
                        return status >= 200 && status < 500;
                    }
                });
                
                if (currentCheck.status >= 200 && currentCheck.status < 300) {
                    console.log('   ‚úÖ URL —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
                    continue;
                }
                
                if (currentCheck.status === 410) {
                    console.log('   üî¥ URL –∏—Å—Ç–µ–∫ (410), —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                } else {
                    console.log(`   ‚ö†Ô∏è URL –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${currentCheck.status}, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å`);
                }
                
            } catch (error) {
                console.log('   üî¥ URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
            // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
            console.log('   üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL...');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –ø–æ –∏–º–µ–Ω–∏
            const fileName = image.alt_text || image.title || `image_${image.id}`;
            
            try {
                // –ò—â–µ–º —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
                const searchPaths = [
                    `${BASE_PATH}/Kvartiry`,
                    `${BASE_PATH}/Doma`,
                    `${BASE_PATH}/Ofisy`,
                    `${BASE_PATH}/articles`,
                    `${BASE_PATH}/Uslugi`
                ];
                
                let newUrl = null;
                
                for (const searchPath of searchPaths) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
                        const folderResponse = await axios.get(
                            `https://cloud-api.yandex.net/v1/disk/resources?path=${encodeURIComponent(searchPath)}&limit=100`,
                            {
                                headers: {
                                    'Authorization': `OAuth ${YANDEX_TOKEN}`
                                },
                                timeout: 10000
                            }
                        );
                        
                        // –ò—â–µ–º —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                        const files = folderResponse.data._embedded?.items || [];
                        const foundFile = files.find(file => 
                            file.type === 'file' && 
                            (file.name === fileName || 
                             file.name.includes(fileName.replace(/\.[^/.]+$/, "")) ||
                             fileName.includes(file.name.replace(/\.[^/.]+$/, "")))
                        );
                        
                        if (foundFile && foundFile.public_url) {
                            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                            newUrl = await getActualDownloadUrl(foundFile.public_url);
                            if (newUrl) {
                                console.log(`   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ: ${searchPath}`);
                                break;
                            }
                        }
                    } catch (searchError) {
                        // –ü–∞–ø–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                        continue;
                    }
                }
                
                if (newUrl) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –ë–î
                    await db.query(
                        'UPDATE images SET url = ?, direct_url = ? WHERE id = ?',
                        [newUrl, newUrl, image.id]
                    );
                    
                    console.log('   ‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î');
                    updatedCount++;
                } else {
                    console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                    errorCount++;
                }
                
            } catch (updateError) {
                console.log('   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError.message);
                errorCount++;
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`‚ö†Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${images.length - updatedCount - errorCount}`);
        
        if (updatedCount > 0) {
            console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
            console.log('   - http://localhost:3001/portfolio.html');
            console.log('   - http://localhost:3001/articles.html');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

refreshExpiredUrls(); 