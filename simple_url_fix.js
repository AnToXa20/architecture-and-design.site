const axios = require('axios');
const db = require('./db');

const YANDEX_TOKEN = 'y0__xCiw9GsARjA8zcg_drjmRPYVRdg8smUUH0pJWclVDOPZc2Erg';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ URL
function extractPublicKeyFromUrl(url) {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö URL
        const patterns = [
            /filename=([^&]+)/,
            /public_key=([^&]+)/,
            /\/([a-zA-Z0-9%+/=]+)\?/,
            /yadi\.sk\/d\/([^/\?]+)/
        ];
        
        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match && match[1]) {
                return decodeURIComponent(match[1]);
            }
        }
        
        return null;
    } catch (error) {
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API
async function getNewDownloadUrl(publicKey) {
    try {
        const response = await axios.get(
            `https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=${encodeURIComponent('https://yadi.sk/d/' + publicKey)}`,
            {
                headers: {
                    'Authorization': `OAuth ${YANDEX_TOKEN}`
                },
                timeout: 10000
            }
        );
        
        if (response.data && response.data.href) {
            return response.data.href;
        }
        
        return null;
    } catch (error) {
        console.log('   ‚ùå API –æ—à–∏–±–∫–∞:', error.message);
        return null;
    }
}

async function simpleUrlFix() {
    try {
        console.log('üîß –ü–†–û–°–¢–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï URL-–°–°–´–õ–û–ö');
        console.log('='.repeat(50));
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        const isConnected = await db.testConnection();
        if (!isConnected) {
            console.log('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
            return;
        }
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        const images = await db.query('SELECT * FROM images WHERE url LIKE "%downloader.disk.yandex.ru%" ORDER BY id');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${images.length}`);
        
        let successCount = 0;
        let errorCount = 0;
        
        for (let i = 0; i < Math.min(images.length, 10); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 10 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const image = images[i];
            console.log(`\n${i + 1}. ID: ${image.id} - ${image.title || image.alt_text}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ URL
            try {
                const checkResponse = await axios.head(image.url, { 
                    timeout: 5000,
                    validateStatus: function (status) {
                        return status >= 200 && status < 500;
                    }
                });
                
                if (checkResponse.status >= 200 && checkResponse.status < 300) {
                    console.log('   ‚úÖ URL —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    continue;
                }
            } catch (error) {
                console.log('   üî¥ URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º');
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
            const fileNameMatch = image.url.match(/filename=([^&]+)/);
            if (fileNameMatch) {
                const fileName = decodeURIComponent(fileNameMatch[1]);
                console.log('   üìÅ –ò–º—è —Ñ–∞–π–ª–∞:', fileName);
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API –ø–æ–∏—Å–∫–∞
                try {
                    const searchResponse = await axios.get(
                        `https://cloud-api.yandex.net/v1/disk/resources/files?fields=items.name,items.public_url,items.path&limit=50`,
                        {
                            headers: {
                                'Authorization': `OAuth ${YANDEX_TOKEN}`
                            },
                            timeout: 10000
                        }
                    );
                    
                    const files = searchResponse.data.items || [];
                    const foundFile = files.find(file => 
                        file.name === fileName || 
                        file.name.toLowerCase() === fileName.toLowerCase()
                    );
                    
                    if (foundFile && foundFile.public_url) {
                        console.log('   üéØ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω!');
                        
                        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                        const newUrl = await getNewDownloadUrl(foundFile.public_url);
                        if (newUrl) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                            await db.query(
                                'UPDATE images SET url = ?, direct_url = ? WHERE id = ?',
                                [newUrl, newUrl, image.id]
                            );
                            
                            console.log('   ‚úÖ URL –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î');
                            successCount++;
                        } else {
                            console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É');
                            errorCount++;
                        }
                    } else {
                        console.log('   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∏—Å–∫–µ');
                        errorCount++;
                    }
                    
                } catch (searchError) {
                    console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', searchError.message);
                    errorCount++;
                }
            } else {
                console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL');
                errorCount++;
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1500));
        }
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        
        if (successCount > 0) {
            console.log('\nüéâ URL –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ.');
        } else {
            console.log('\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

simpleUrlFix(); 